document.addEventListener("DOMContentLoaded",()=>{let e=0,t=[],n=["$","USD"];const d=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9],r=document.querySelector(".currency-table"),c=document.querySelector(".invest-form"),o=document.querySelector(".invest-input");function l(c){document.querySelectorAll(".fiat").forEach(e=>e.textContent=` (${n[1]})`),t=c;let o=document.createElement("tbody");c.forEach((t,n)=>{let r=document.createElement("tr");r.innerHTML=`\n                    <td>${t.rank}</td>\n                    <td>${t.name}</td>\n                    <td>${a(t.market_cap_usd)}</td>\n                    <td>${a(t.price_usd)}</td>\n                    <td>${d[n]}%</td>\n                    <td>${function(t){let n=e*t/100;return e-=n,a(n)}(d[n])}</td>\n            `,o.appendChild(r)}),r.appendChild(o)}function a(e){let t=parseFloat(e);return t%1!=0&&t>1?(t=`${n[0]}${t.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):t<1?`${n[0]}${t}`:(t=`${n[0]}${parseInt(t)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}c.addEventListener("submit",n=>(function(n){if(n.preventDefault(),""!==o.value){for(e=o.value;r.childNodes.length>1;)r.removeChild(r.lastChild);l(t)}})(n)),function(e){return fetch(e).then(e=>e.json())}("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(e=>l(e))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiaW52ZXN0QW1vdW50IiwiYWxsQ3VycmVuY2llcyIsImZpYXQiLCJjMjBJbmRleCIsImN1cnJlbmN5VGFibGUiLCJxdWVyeVNlbGVjdG9yIiwiZm9ybSIsImlucHV0IiwiYnVpbGRUYWJsZSIsImN1cnJlbmNpZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsIml0ZW0iLCJ0ZXh0Q29udGVudCIsInRib2R5IiwiY3JlYXRlRWxlbWVudCIsImN1ciIsImNvaW4iLCJ0ciIsImlubmVySFRNTCIsInJhbmsiLCJuYW1lIiwiZm9ybWF0TnVtIiwibWFya2V0X2NhcF91c2QiLCJwcmljZV91c2QiLCJ2YWx1ZSIsImFtb3VudCIsImNhbGN1bGF0ZUludmVzdG1lbnQiLCJhcHBlbmRDaGlsZCIsIm5ld051bSIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwicmVwbGFjZSIsInBhcnNlSW50IiwiZSIsInByZXZlbnREZWZhdWx0IiwiY2hpbGROb2RlcyIsImxlbmd0aCIsInJlbW92ZUNoaWxkIiwibGFzdENoaWxkIiwic3VibWl0Rm9ybSIsInVybCIsImZldGNoIiwidGhlbiIsInJlcyIsImpzb24iLCJnZXREYXRhIl0sIm1hcHBpbmdzIjoiQUFBQUEsU0FBQUMsaUJBQUEsbUJBQUEsS0FHQSxJQUFBQyxFQUFBLEVBQ0FDLEtBQ0FDLEdBQUEsSUFBQSxPQUNBLE1BQUFDLEdBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxJQUNBLElBQUEsSUFBQSxJQUFBLElBQUEsRUFDQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQ0EsSUFBQSxJQUFBLElBQUEsR0FBQSxJQUtBQyxFQUFBTixTQUFBTyxjQUFBLG1CQUNBQyxFQUFBUixTQUFBTyxjQUFBLGdCQUNBRSxFQUFBVCxTQUFBTyxjQUFBLGlCQTRCQSxTQUFBRyxFQUFBQyxHQUVBWCxTQUFBWSxpQkFBQSxTQUFBQyxRQUFBQyxHQUFBQSxFQUFBQyxpQkFBQVgsRUFBQSxPQUVBRCxFQUFBUSxFQUNBLElBQUFLLEVBQUFoQixTQUFBaUIsY0FBQSxTQUNBTixFQUFBRSxRQUFBLENBQUFLLEVBQUFDLEtBRUEsSUFBQUMsRUFBQXBCLFNBQUFpQixjQUFBLE1BQ0FHLEVBQUFDLHVDQUNBSCxFQUFBSSxzQ0FDQUosRUFBQUssc0NBQ0FDLEVBQUFOLEVBQUFPLGlEQUNBRCxFQUFBTixFQUFBUSw0Q0FDQXJCLEVBQUFjLHFDQXdDQSxTQUFBUSxHQUVBLElBQUFDLEVBQUExQixFQUFBeUIsRUFBQSxJQUVBLE9BREF6QixHQUFBMEIsRUFDQUosRUFBQUksR0EzQ0FDLENBQUF4QixFQUFBYyx5QkFFQUgsRUFBQWMsWUFBQVYsS0FHQWQsRUFBQXdCLFlBQUFkLEdBU0EsU0FBQVEsRUFBQUcsR0FDQSxJQUFBSSxFQUFBQyxXQUFBTCxHQUdBLE9BQUFJLEVBQUEsR0FBQSxHQUFBQSxFQUFBLEdBR0FBLEtBQUEzQixFQUFBLEtBQUEyQixFQUFBRSxRQUFBLE1BRUFDLFFBQUEsMkJBQUEsT0FDQUgsRUFBQSxLQUNBM0IsRUFBQSxLQUFBMkIsS0FHQUEsS0FBQTNCLEVBQUEsS0FBQStCLFNBQUFKLE1BQ0FHLFFBQUEsMkJBQUEsT0FwRUExQixFQUFBUCxpQkFBQSxTQUFBbUMsSUF1RkEsU0FBQUEsR0FFQSxHQURBQSxFQUFBQyxpQkFDQSxLQUFBNUIsRUFBQWtCLE1BQUEsQ0FJQSxJQUhBekIsRUFBQU8sRUFBQWtCLE1BR0FyQixFQUFBZ0MsV0FBQUMsT0FBQSxHQUNBakMsRUFBQWtDLFlBQUFsQyxFQUFBbUMsV0FFQS9CLEVBQUFQLEtBaEdBdUMsQ0FBQU4sSUFlQSxTQUFBTyxHQUNBLE9BQUFDLE1BQUFELEdBQ0FFLEtBQUFDLEdBQUFBLEVBQUFDLFFBWkFDLENBQUEscURBQ0FILEtBQUFDLEdBQUFwQyxFQUFBb0MiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcblxyXG4gICAgLy8gPT09PT0gR0xPQkFMUyA9PT09PSAvL1xyXG4gICAgbGV0IGludmVzdEFtb3VudCAgICA9IDA7XHJcbiAgICBsZXQgYWxsQ3VycmVuY2llcyAgID0gW107XHJcbiAgICBsZXQgZmlhdCAgICAgICAgICAgID0gWyckJywgJ1VTRCddO1xyXG4gICAgY29uc3QgYzIwSW5kZXggICAgICA9IFsgMTMuNCwgMTIuMywgMTAuNSwgMTAuMiwgOS4yLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDcuNiwgNS40LCA0LjksIDQuMywgNCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjgsIDMuNCwgMi4xLCAxLjcsIDEuNSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjUsIDEuMiwgMS4yLCAwLjksIDAuOSBdO1xyXG5cclxuXHJcblxyXG4gICAgLy8gPT09PT0gUHV0IGFsbCBET00gdGFyZ2V0dGluZyBoZXJlID09PT09IC8vXHJcbiAgICBjb25zdCBjdXJyZW5jeVRhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggJy5jdXJyZW5jeS10YWJsZScgKTtcclxuICAgIGNvbnN0IGZvcm0gICAgICAgICAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnLmludmVzdC1mb3JtJyApO1xyXG4gICAgY29uc3QgaW5wdXQgICAgICAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICcuaW52ZXN0LWlucHV0JyApO1xyXG5cclxuXHJcbiAgICAvLyA9PT09PSBET00gTGlzdGVuZXJzID09PT09IC8vIFxyXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCAnc3VibWl0JywgKCBlICkgPT4gc3VibWl0Rm9ybSggZSApIClcclxuXHJcblxyXG5cclxuXHJcbiAgICBnZXREYXRhKCAnaHR0cHM6Ly9hcGkuY29pbm1hcmtldGNhcC5jb20vdjEvdGlja2VyLz9saW1pdD0yMCcgKVxyXG4gICAgICAgIC50aGVuKCByZXMgPT4gYnVpbGRUYWJsZSggcmVzICkgKVxyXG5cclxuXHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge3VybH0gU3RyaW5nICB1cmwgc3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7IHByb21pc2UgfSBcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0RGF0YSggdXJsICkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaCggdXJsIClcclxuICAgICAgICAgICAgICAgIC50aGVuKCByZXMgPT4gcmVzLmpzb24oKSApXHJcbiAgICB9OyBcclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHtjdXJyZW5jaWVzfSBBcnJheSBhcnJheSBvZiBjdXJyZW5jaWVzIGRhdGEgIFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBidWlsZFRhYmxlKCBjdXJyZW5jaWVzICkge1xyXG4gICAgICAgIC8vIEFkZCBmaWF0IHRvIHRoZWFkXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZpYXQnKS5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLnRleHRDb250ZW50ID0gYCAoJHtmaWF0WzFdfSlgKTtcclxuICAgICAgIFxyXG4gICAgICAgIGFsbEN1cnJlbmNpZXMgPSBjdXJyZW5jaWVzO1xyXG4gICAgICAgIGxldCB0Ym9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICd0Ym9keScgKTtcclxuICAgICAgICBjdXJyZW5jaWVzLmZvckVhY2goICggY3VyLCBjb2luICkgPT4ge1xyXG5cclxuICAgICAgICAgICAgbGV0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3RyJyApO1xyXG4gICAgICAgICAgICB0ci5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7IGN1ci5yYW5rIH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD4keyBjdXIubmFtZSB9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+JHsgZm9ybWF0TnVtKCBjdXIubWFya2V0X2NhcF91c2QgKSB9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+JHsgZm9ybWF0TnVtKCBjdXIucHJpY2VfdXNkICkgfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7IGMyMEluZGV4W2NvaW5dIH0lPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+JHsgY2FsY3VsYXRlSW52ZXN0bWVudCggYzIwSW5kZXhbY29pbl0gKSB9PC90ZD5cclxuICAgICAgICAgICAgYDtcclxuICAgICAgICAgICAgdGJvZHkuYXBwZW5kQ2hpbGQoIHRyIClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSApXHJcbiAgICAgICAgY3VycmVuY3lUYWJsZS5hcHBlbmRDaGlsZCggdGJvZHkgKVxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7dmFsdWV9IE51bWJlciBmcm9tIGNlbGxEYXRhXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBGb3JtYXR0ZWQgd2l0aCBjb21tYXMgYW5kIGZpYXQgc3ltYm9sLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBmb3JtYXROdW0oIHZhbHVlICkge1xyXG4gICAgICAgIGxldCBuZXdOdW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIENoZWNrIGZvciBmbG9hdFxyXG4gICAgICAgIGlmIChuZXdOdW0gJSAxICE9PSAwICYmIG5ld051bSA+IDEpIHtcclxuICAgICAgICAgICAgLy8gQWRkIGZpYXQgY3VycmVuY3kgc3ltYm9sICRcclxuICAgICAgICAgICAgLy8gSWYgcHJpY2UgaXMgb3ZlciAxLCBsaW1pdCBkZWNpbWFscyB0byB0d28gcGxhY2VzXHJcbiAgICAgICAgICAgIG5ld051bSA9IGAke2ZpYXRbMF19JHtuZXdOdW0udG9GaXhlZCgyKX1gO1xyXG4gICAgICAgICAgICAvLyBBZGQgY29tbWEgYWZ0ZXIgZXZlcnkgdGhyZWUgbnVtYmVyc1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3TnVtID0gbmV3TnVtLnJlcGxhY2UoLyhcXGQpKD89KFxcZFxcZFxcZCkrKD8hXFxkKSkvZywgXCIkMSxcIik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZXdOdW0gPCAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXdOdW0gPSBgJHtmaWF0WzBdfSR7bmV3TnVtfWA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgbWFya2V0IGNhcCwgbm8gZGVjaW1hbCBwbGFjZVxyXG4gICAgICAgICAgICBuZXdOdW0gPSBgJHtmaWF0WzBdfSR7cGFyc2VJbnQobmV3TnVtKX1gO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3TnVtID0gbmV3TnVtLnJlcGxhY2UoLyhcXGQpKD89KFxcZFxcZFxcZCkrKD8hXFxkKSkvZywgXCIkMSxcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSBcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7dmFsdWV9IE51bWJlciBjdXJyZW5jeSdzIGluZGV4IHBlcmNlbnRhZ2VcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVJbnZlc3RtZW50KCB2YWx1ZSApIHtcclxuICAgICAgICAvLyA9PT09PSBOZWVkIHRvIGZpZ3VyZSBvdXQgdGhlIGNhbGN1bGF0aW9ucyBoZXJlID09PT09IC8vXHJcbiAgICAgICAgbGV0IGFtb3VudCA9IGludmVzdEFtb3VudCAqIHZhbHVlIC8gMTAwO1xyXG4gICAgICAgIGludmVzdEFtb3VudCA9IGludmVzdEFtb3VudCAtIGFtb3VudDtcclxuICAgICAgICByZXR1cm4gZm9ybWF0TnVtKCBhbW91bnQgKTsgXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBzdWJtaXRGb3JtKCBlICkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZiggaW5wdXQudmFsdWUgIT09ICcnICkge1xyXG4gICAgICAgICAgICBpbnZlc3RBbW91bnQgPSBpbnB1dC52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vID09PT09IFJlbW92ZSB0YWJsZSBib2R5IGFuZCByZS1yZW5kZXIgPT09PT0gLy9cclxuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbmN5VGFibGUuY2hpbGROb2Rlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW5jeVRhYmxlLnJlbW92ZUNoaWxkKGN1cnJlbmN5VGFibGUubGFzdENoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBidWlsZFRhYmxlKCBhbGxDdXJyZW5jaWVzICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59ICkiXX0=
