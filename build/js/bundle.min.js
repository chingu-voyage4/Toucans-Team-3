const chart=function(){let t=["January","February","March","April","May","June","July"],e=[];function n(){return Math.floor(256*Math.random()).toString()}return{getChartData:function(r){let a=r.filter((t,e)=>e<=9);Promise.all(a.map(t=>fetch(`https://cors-anywhere.herokuapp.com/https://min-api.cryptocompare.com/data/histoday?fsym=${t.symbol}&tsym=USD&limit=6`).then(t=>t.json()))).then(r=>{r.forEach((t,r)=>{let o=[];t.Data.forEach(t=>o.push(t.close));let c=`rgba(${n()}, ${n()}, ${n()}, 0.8)`;e.push({label:a[r].symbol,backgroundColor:"transparent",borderColor:c,borderWidth:4.5,pointBackgroundColor:c,pointRadius:5,pointHoverRadius:8,data:o})}),function(){const n=document.getElementById("currency-chart").getContext("2d");new Chart(n,{type:"line",data:{labels:t,datasets:e},options:{responsive:!0,maintainAspectRatio:!1}})}()})}}}(),CurrencyTable=function(t){let e=0,n=[],r=["$","USD"];const a=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9];let o;function c(e){document.querySelectorAll(".fiat").forEach(t=>t.textContent=` (${r[1]})`),n=e;let c=document.createElement("tbody"),u=[];e.forEach((t,e)=>{u.push(t.symbol);let n=document.createElement("tr");n.innerHTML=`\n                    <td>${t.rank}</td>\n                    <td>${t.name}</td>\n                    <td>${l(t.market_cap_usd)}</td>\n                    <td>${l(t.price_usd)}</td>\n                    <td>${a[e]}%</td>\n                    <td>${d(a[e])}</td>\n            `,c.appendChild(n)}),t.currencyTable.appendChild(c),t.getNews(u),o&&clearInterval(o),o=setInterval(()=>t.getNews(u),12e4)}function l(t){let e=parseFloat(t);return e%1!=0&&e>1?(e=`${r[0]}${e.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):e<1?`${r[0]}${e}`:(e=`${r[0]}${parseInt(e)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}function d(t){let n=e*t/100;return e-=n,l(n)}return{buildTable:c,formatNum:l,calculateInvestment:d,submitForm:function(r){if(r.preventDefault(),""!==t.input.value){for(e=t.input.value;t.currencyTable.childNodes.length>1;)t.currencyTable.removeChild(t.currencyTable.lastChild);c(n)}}}};document.addEventListener("DOMContentLoaded",()=>{const t="https://min-api.cryptocompare.com/data/news/?categories=",e=5,n=document.querySelector(".currency-table"),r=document.querySelector(".invest-form"),a=document.querySelector(".invest-input"),o=document.querySelector(".news-table"),c=CurrencyTable({form:r,input:a,currencyTable:n,getNews:function(n){let r=n.join(",");fetchUrl=t.concat(r),l(fetchUrl).then(t=>(function(t){let n=t.slice(0,e),r=document.createElement("tbody");r.setAttribute("id","newstable");let a=document.querySelector("#newstable");null!==a&&(a.innerHTML="");n.forEach(t=>{let e=document.createElement("tr");e.innerHTML=`\n            <td><a class="font-weight-bold" href="${t.url}">${t.title}</a> <p>${t.source}</p>\n            </td>\n            `,r.appendChild(e)}),o.appendChild(r)})(t))}});function l(t){return fetch(t).then(t=>t.json())}r.addEventListener("submit",t=>(function(t){c.submitForm(t)})(t)),l("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(t=>{c.buildTable(t),chart.getChartData(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
