const chart=function(){let e=["January","February","March","April","May","June","July"],t=[];function n(){return Math.floor(256*Math.random()).toString()}return{getChartData:function(r){let a=r.filter((e,t)=>t<=9);Promise.all(a.map(e=>fetch(`https://cors-anywhere.herokuapp.com/https://min-api.cryptocompare.com/data/histoday?fsym=${e.symbol}&tsym=USD&limit=6`).then(e=>e.json()))).then(r=>{r.forEach((e,r)=>{let c=[];e.Data.forEach(e=>c.push(e.close)),t.push({label:a[r].symbol,backgroundColor:"transparent",borderColor:`rgba(${n()}, ${n()}, ${n()}, 0.8)`,data:c})}),function(){const n=document.getElementById("currency-chart").getContext("2d");new Chart(n,{type:"line",data:{labels:e,datasets:t},options:{}})}()})}}}(),CurrencyTable=function(e){let t=0,n=[],r=["$","USD"];const a=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9];let c;function o(t){document.querySelectorAll(".fiat").forEach(e=>e.textContent=` (${r[1]})`),n=t;let o=document.createElement("tbody"),d=[];t.forEach((e,t)=>{d.push(e.symbol);let n=document.createElement("tr");n.innerHTML=`\n                    <td>${e.rank}</td>\n                    <td>${e.name}</td>\n                    <td>${l(e.market_cap_usd)}</td>\n                    <td>${l(e.price_usd)}</td>\n                    <td>${a[t]}%</td>\n                    <td>${u(a[t])}</td>\n            `,o.appendChild(n)}),e.currencyTable.appendChild(o),e.getNews(d),c&&clearInterval(c),c=setInterval(()=>e.getNews(d),12e4)}function l(e){let t=parseFloat(e);return t%1!=0&&t>1?(t=`${r[0]}${t.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):t<1?`${r[0]}${t}`:(t=`${r[0]}${parseInt(t)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}function u(e){let n=t*e/100;return t-=n,l(n)}return{buildTable:o,formatNum:l,calculateInvestment:u,submitForm:function(r){if(r.preventDefault(),""!==e.input.value){for(t=e.input.value;e.currencyTable.childNodes.length>1;)e.currencyTable.removeChild(e.currencyTable.lastChild);o(n)}}}};document.addEventListener("DOMContentLoaded",()=>{const e="https://min-api.cryptocompare.com/data/news/?categories=",t=5,n=document.querySelector(".currency-table"),r=document.querySelector(".invest-form"),a=document.querySelector(".invest-input"),c=document.querySelector(".news-table"),o=CurrencyTable({form:r,input:a,currencyTable:n,getNews:function(n){let r=n.join(",");fetchUrl=e.concat(r),l(fetchUrl).then(e=>(function(e){let n=e.slice(0,t),r=document.createElement("tbody");r.setAttribute("id","newstable");let a=document.querySelector("#newstable");null!==a&&(a.innerHTML="");n.forEach(e=>{let t=document.createElement("tr");t.innerHTML=`\n            <td><a class="font-weight-bold" href="${e.url}">${e.title}</a> <p>${e.source}</p>\n            </td>\n            `,r.appendChild(t)}),c.appendChild(r)})(e))}});function l(e){return fetch(e).then(e=>e.json())}r.addEventListener("submit",e=>(function(e){o.submitForm(e)})(e)),l("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(e=>{o.buildTable(e),chart.getChartData(e)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
