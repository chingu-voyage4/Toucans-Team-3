const chart=function(){let e=["January","February","March","April","May","June","July"],t=[];function n(){return Math.floor(256*Math.random()).toString()}return{getChartData:function(r,a){return e=[],t=[],fetch(`https://cors-anywhere.herokuapp.com/https://min-api.cryptocompare.com/data/histoday?fsym=${r}&tsym=USD&limit=6`).then(e=>e.json()).then(r=>{let c=[];r.Data.forEach(t=>{c.push(t.close),e.push(function(e){const t=new Date(1e3*e),n=t.getDate(),r=t.getMonth();return`${["January","February","March","April","May","June","July","August","September","October","November","December"][r]} ${n}`}(t.time))}),n(),n(),n(),t.push({label:a,backgroundColor:"transparent",borderColor:"rgba( 0, 0, 0, 0.7)",borderWidth:3,pointBackgroundColor:"#66ff66",pointRadius:5,pointHoverRadius:8,data:c}),function(){const n=document.getElementById("currency-chart").getContext("2d");new Chart(n,{type:"line",data:{labels:e,datasets:t},options:{responsive:!0,maintainAspectRatio:!1,scales:{yAxes:[{scaleLabel:{display:!0,labelString:"Price in USD",fontSize:20}}],xAxes:[{scaleLabel:{display:!0,labelString:"Day",fontSize:20}}]}}})}()})}}}(),CurrencyTable=function(e){let t=0,n=[],r=["$","USD"];const a=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9],c=document.getElementById("currency-chart");function o(o){document.querySelectorAll(".fiat").forEach(e=>e.textContent=` (${r[1]})`),n=o;let s=document.createElement("tbody"),d=[];o.forEach((n,r)=>{d.push(n.symbol);let o=document.createElement("tr");o.innerHTML=`\n                    <td>${n.rank}</td>\n                    <td><span class="currency-name">${n.name}</span> <span class="currency-symbol"> ${n.symbol} </span></td>\n                    <td>${i(n.market_cap_usd)}</td>\n                    <td>${i(n.price_usd)}</td>\n                    <td>${a[r]}%</td>\n                    <td>${l(a[r])}<br><span class='coin-output'>  (à¸¿${t*a[r]/100/n.price_usd})</span></td>\n            `,o.style.cursor="pointer",s.appendChild(o),o.addEventListener("click",t=>{o.classList.contains("active")||c.scrollIntoView({behavior:"smooth"}),function(e){let t=document.querySelectorAll("tr.active");for(let e=0;e<t.length;e++)t[e].classList.remove("active");"span"===e.target.nodeName.toLowerCase()?e.target.parentNode.parentNode.classList.add("active"):e.target.parentNode.classList.add("active")}(t),c.innerHTML="",e.chart.getChartData(n.symbol,n.name)})}),e.currencyTable.appendChild(s),e.getNews(d),e.currencySymbol=d}function i(e){let t=parseFloat(e);return t%1!=0&&t>1?(t=`${r[0]}${t.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):t<1?`${r[0]}${t}`:(t=`${r[0]}${parseInt(t)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}function l(e){return i(t*e/100)}return{buildTable:o,formatNum:i,calculateInvestment:l,submitForm:function(r){if(r.preventDefault(),""!==e.input.value){for(t=e.input.value;e.currencyTable.childNodes.length>1;)e.currencyTable.removeChild(e.currencyTable.lastChild);o(n)}}}};document.addEventListener("DOMContentLoaded",()=>{const e="https://min-api.cryptocompare.com/data/news/?categories=";let t=[];const n=5;let r=0,a=n;const c=document.querySelector(".currency-table"),o=document.querySelector(".invest-form"),i=document.querySelector(".invest-input"),l=document.querySelector(".news-table"),s=document.querySelector(".refresh-icon"),d=document.querySelector("#nav-main"),u=d.offsetTop,m=CurrencyTable({form:o,input:i,currencyTable:c,getNews:h,currencySymbols:t,chart:chart});function p(e){return fetch(e).then(e=>e.json())}function h(t){let c=t.join(",");s.children[0].classList.add("spin-animation"),setTimeout(function(){s.children[0].classList.remove("spin-animation")},500),fetchUrl=e.concat(c),p(fetchUrl).then(e=>(function(e){a>=5*n?(r=0,a=n):(r+=n,a+=n);let t=e.slice(r,a),c=document.createElement("tbody");null!==l&&(l.innerHTML=""),t.forEach(e=>{let t=document.createElement("tr");t.innerHTML=`\n            <td><a class="font-weight-bold" href="${e.url}">${e.title}</a> <p>${e.source}</p>\n            </td>\n            `,c.appendChild(t)}),l.appendChild(c)})(e))}o.addEventListener("submit",e=>(function(e){m.submitForm(e)})(e)),s.addEventListener("click",()=>h(t)),window.addEventListener("scroll",function(){window.scrollY>=u?(document.body.style.paddingTop=d.offsetHeight+"px",document.body.classList.add("fixed-nav")):(document.body.style.paddingTop=0,document.body.classList.remove("fixed-nav"))}),p("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(e=>{m.buildTable(e),chart.getChartData("BTC","Bitcoin")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
