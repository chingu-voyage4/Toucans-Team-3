document.addEventListener("DOMContentLoaded",()=>{let e=0,t=[],n=["$","USD"];const d=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9],r="https://min-api.cryptocompare.com/data/news/?categories=",c=5,l=document.querySelector(".currency-table"),o=document.querySelector(".invest-form"),a=document.querySelector(".invest-input"),i=document.querySelector(".news-table");function u(e){return fetch(e).then(e=>e.json())}function m(e){let t=e.join(",");fetchUrl=r.concat(t),console.log(fetchUrl),u(fetchUrl).then(e=>(function(e){let t=e.slice(0,c),n=document.createElement("tbody");n.setAttribute("id","newstable");let d=document.querySelector("#newstable");null!==d&&(d.innerHTML=""),t.forEach(e=>{let t=document.createElement("tr");t.innerHTML=`\n            <td><img src="${e.imageurl}" title=${e.title}" alt="news"/></td>\n            <td><p></p><a href="${e.url}">${e.title}</a></p>\n            <p>${e.body}</p></td>\n            `,n.appendChild(t)}),i.appendChild(n)})(e))}function p(r){document.querySelectorAll(".fiat").forEach(e=>e.textContent=` (${n[1]})`),t=r;let c=document.createElement("tbody"),o=[];r.forEach((t,n)=>{o.push(t.symbol);let r=document.createElement("tr");r.innerHTML=`\n                    <td>${t.rank}</td>\n                    <td>${t.name}</td>\n                    <td>${s(t.market_cap_usd)}</td>\n                    <td>${s(t.price_usd)}</td>\n                    <td>${d[n]}%</td>\n                    <td>${function(t){let n=e*t/100;return e-=n,s(n)}(d[n])}</td>\n            `,c.appendChild(r)}),m(o),l.appendChild(c)}function s(e){let t=parseFloat(e);return t%1!=0&&t>1?(t=`${n[0]}${t.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):t<1?`${n[0]}${t}`:(t=`${n[0]}${parseInt(t)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}o.addEventListener("submit",n=>(function(n){if(n.preventDefault(),""!==a.value){for(e=a.value;l.childNodes.length>1;)l.removeChild(l.lastChild);p(t)}})(n)),u("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(e=>p(e))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
