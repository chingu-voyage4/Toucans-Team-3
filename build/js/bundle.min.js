document.addEventListener("DOMContentLoaded",()=>{let e=0,t=[],n=["$","USD"];const d=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9],r=document.querySelector(".currency-table"),c=document.querySelector(".invest-form"),o=document.querySelector(".invest-input");function a(c){document.querySelectorAll(".fiat").forEach(e=>e.textContent=` (${n[1]})`),t=c;const o=["rank","name","market_cap_usd","price_usd","investment"];let a=document.createElement("tbody");c.forEach((t,n)=>{let r=document.createElement("tr");o.forEach(c=>{let o=document.createElement("td"),a=t[c];o.textContent="investment"===c?function(t){let n=e*t/100;return e-=n,l(n)}(d[n]):"market_cap_usd"===c||"price_usd"===c?l(a):a,r.appendChild(o)}),a.appendChild(r)}),r.appendChild(a)}function l(e){let t=parseFloat(e);return t%1!=0&&t>1?(t=`${n[0]}${t.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):t<1?`${n[0]}${t}`:(t=`${n[0]}${parseInt(t)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}c.addEventListener("submit",n=>(function(n){if(n.preventDefault(),""!==o.value){for(e=o.value;r.childNodes.length>1;)r.removeChild(r.lastChild);a(t)}})(n)),function(e){return fetch(e).then(e=>e.json())}("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(e=>a(e))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
