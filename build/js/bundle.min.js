const chart=function(){let t=["January","February","March","April","May","June","July"],e=[];function n(){return Math.floor(256*Math.random()).toString()}return{getChartData:function(r){let o=r.filter((t,e)=>e<=9);Promise.all(o.map(t=>fetch(`https://cors-anywhere.herokuapp.com/https://min-api.cryptocompare.com/data/histoday?fsym=${t.symbol}&tsym=USD&limit=6`).then(t=>t.json()))).then(r=>{r.forEach((t,r)=>{let c=[];t.Data.forEach(t=>c.push(t.close));let a=`rgba(${n()}, ${n()}, ${n()}, 0.8)`;e.push({label:o[r].symbol,backgroundColor:"transparent",borderColor:a,borderWidth:4.5,pointBackgroundColor:a,pointRadius:5,pointHoverRadius:8,data:c})}),function(){const n=document.getElementById("currency-chart").getContext("2d");new Chart(n,{type:"line",data:{labels:t,datasets:e},options:{responsive:!0,maintainAspectRatio:!1}})}()})}}}(),CurrencyTable=function(t){let e=0,n=[],r=["$","USD"];const o=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9];function c(e){document.querySelectorAll(".fiat").forEach(t=>t.textContent=` (${r[1]})`),n=e;let c=document.createElement("tbody"),d=[];e.forEach((t,e)=>{d.push(t.symbol);let n=document.createElement("tr");n.innerHTML=`\n                    <td>${t.rank}</td>\n                    <td>${t.name}</td>\n                    <td>${a(t.market_cap_usd)}</td>\n                    <td>${a(t.price_usd)}</td>\n                    <td>${o[e]}%</td>\n                    <td>${l(o[e])}</td>\n            `,c.appendChild(n)}),t.currencyTable.appendChild(c),t.getNews(d),t.currencySymbol=d}function a(t){let e=parseFloat(t);return e%1!=0&&e>1?(e=`${r[0]}${e.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):e<1?`${r[0]}${e}`:(e=`${r[0]}${parseInt(e)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}function l(t){let n=e*t/100;return e-=n,a(n)}return{buildTable:c,formatNum:a,calculateInvestment:l,submitForm:function(r){if(r.preventDefault(),""!==t.input.value){for(e=t.input.value;t.currencyTable.childNodes.length>1;)t.currencyTable.removeChild(t.currencyTable.lastChild);c(n)}}}};document.addEventListener("DOMContentLoaded",()=>{const t="https://min-api.cryptocompare.com/data/news/?categories=";let e=[];const n=5;let r=0,o=n;const c=document.querySelector(".currency-table"),a=document.querySelector(".invest-form"),l=document.querySelector(".invest-input"),d=document.querySelector(".news-table"),u=document.querySelector(".refresh-icon"),i=CurrencyTable({form:a,input:l,currencyTable:c,getNews:m,currencySymbols:e});function s(t){return fetch(t).then(t=>t.json())}function m(e){let c=e.join(",");fetchUrl=t.concat(c),s(fetchUrl).then(t=>(function(t){o>=5*n?(r=0,o=n):(r+=n,o+=n);let e=t.slice(r,o),c=document.createElement("tbody");null!==d&&(d.innerHTML=""),e.forEach(t=>{let e=document.createElement("tr");e.innerHTML=`\n            <td><a class="font-weight-bold" href="${t.url}">${t.title}</a> <p>${t.source}</p>\n            </td>\n            `,c.appendChild(e)}),d.appendChild(c)})(t))}a.addEventListener("submit",t=>(function(t){i.submitForm(t)})(t)),u.addEventListener("click",()=>m(e)),s("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(t=>{i.buildTable(t),chart.getChartData(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYXJ0LmpzIiwiY3VycmVuY3lUYWJsZS5qcyIsIm1haW4uanMiXSwibmFtZXMiOlsiY2hhcnQiLCJsYWJlbHMiLCJkYXRhc2V0cyIsImdldFJhbmRvbSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInRvU3RyaW5nIiwiZ2V0Q2hhcnREYXRhIiwiY2hhcnREYXRhIiwiY3VycmVuY2llcyIsImZpbHRlciIsImNkIiwiaW5kZXgiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiZmV0Y2giLCJzeW1ib2wiLCJ0aGVuIiwicmVzIiwianNvbiIsImZvckVhY2giLCJkYXRhIiwiY2xvc2luZ1ByaWNlcyIsIkRhdGEiLCJkIiwicHVzaCIsImNsb3NlIiwibGluZUNvbG9yIiwibGFiZWwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwicG9pbnRCYWNrZ3JvdW5kQ29sb3IiLCJwb2ludFJhZGl1cyIsInBvaW50SG92ZXJSYWRpdXMiLCJjdHgiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsIkNoYXJ0IiwidHlwZSIsIm9wdGlvbnMiLCJyZXNwb25zaXZlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsImJ1aWxkQ2hhcnQiLCJDdXJyZW5jeVRhYmxlIiwiZ2xvYmFsIiwiaW52ZXN0QW1vdW50IiwiYWxsQ3VycmVuY2llcyIsImZpYXQiLCJjMjBJbmRleCIsImJ1aWxkVGFibGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaXRlbSIsInRleHRDb250ZW50IiwidGJvZHkiLCJjcmVhdGVFbGVtZW50IiwiY3VyclN5bWJvbHMiLCJjdXIiLCJjb2luIiwidHIiLCJpbm5lckhUTUwiLCJyYW5rIiwibmFtZSIsImZvcm1hdE51bSIsIm1hcmtldF9jYXBfdXNkIiwicHJpY2VfdXNkIiwiY2FsY3VsYXRlSW52ZXN0bWVudCIsImFwcGVuZENoaWxkIiwiY3VycmVuY3lUYWJsZSIsImdldE5ld3MiLCJjdXJyZW5jeVN5bWJvbCIsInZhbHVlIiwibmV3TnVtIiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJyZXBsYWNlIiwicGFyc2VJbnQiLCJhbW91bnQiLCJzdWJtaXRGb3JtIiwiZSIsInByZXZlbnREZWZhdWx0IiwiaW5wdXQiLCJjaGlsZE5vZGVzIiwibGVuZ3RoIiwicmVtb3ZlQ2hpbGQiLCJsYXN0Q2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwibmV3c1VybCIsImN1cnJlbmN5U3ltYm9scyIsIm5ld3NMaW1pdCIsImZpcnN0QXJ0aWNsZSIsImxhc3RBcnRpY2xlIiwicXVlcnlTZWxlY3RvciIsImZvcm0iLCJuZXdzVGFibGUiLCJyZWZyZXNoQnV0dG9uIiwiQ3VycmVuY3kiLCJnZXREYXRhIiwidXJsIiwiY3VyclN0cmluZyIsImpvaW4iLCJmZXRjaFVybCIsImNvbmNhdCIsImFydGljbGVzIiwiYXJ0aWNsZXNTYW1wbGUiLCJzbGljZSIsImluZm8iLCJ0aXRsZSIsInNvdXJjZSIsInNob3dOZXdzIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFBQSxNQUFBLFdBRUEsSUFBQUMsR0FBQSxVQUFBLFdBQUEsUUFBQSxRQUFBLE1BQUEsT0FBQSxRQUNBQyxLQTREQSxTQUFBQyxJQUNBLE9BQUFDLEtBQUFDLE1BQUEsSUFBQUQsS0FBQUUsVUFBQUMsV0FJQSxPQUNBQyxhQS9EQSxTQUFBQyxHQUVBLElBQUFDLEVBQUFELEVBQUFFLE9BQUEsQ0FBQUMsRUFBQUMsSUFBQUEsR0FBQSxHQUVBQyxRQUFBQyxJQUFBTCxFQUFBTSxJQUFBSixHQUNBSyxrR0FBQUwsRUFBQU0sMkJBQ0FDLEtBQUFDLEdBQUFBLEVBQUFDLFVBRUFGLEtBQUFDLElBRUFBLEVBQUFFLFFBQUEsQ0FBQUMsRUFBQVYsS0FDQSxJQUFBVyxLQUNBRCxFQUFBRSxLQUFBSCxRQUFBSSxHQUFBRixFQUFBRyxLQUFBRCxFQUFBRSxRQUNBLElBQUFDLFVBd0NBMUIsUUFBQUEsUUFBQUEsWUF2Q0FELEVBQUF5QixNQUNBRyxNQUFBcEIsRUFBQUcsR0FBQUssT0FDQWEsZ0JBQUEs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R0FDQUMsRUFBQSxFQUNBQyxFQUFBRixJQUVBQyxHQUFBRCxFQUNBRSxHQUFBRixHQUVBLElBQUFlLEVBQUFELEVBQUFFLE1BQUFmLEVBQUFDLEdBQ0FyQyxFQUFBbkIsU0FBQW9CLGNBQUEsU0FJQSxPQUFBdUMsSUFDQUEsRUFBQWxDLFVBQUEsSUFHQTRDLEVBQUFyRixRQUFBdUYsSUFDQSxJQUFBL0MsRUFBQXhCLFNBQUFvQixjQUFBLE1BQ0FJLEVBQUFDLGlFQUNBOEMsRUFBQVIsUUFBQVEsRUFBQUMsZ0JBQUFELEVBQUFFLDhDQUdBdEQsRUFBQWEsWUFBQVIsS0FFQW1DLEVBQUEzQixZQUFBYixJQWFBdUQsQ0FBQTVGLElBN0RBNEUsRUFBQVAsaUJBQUEsU0FBQVAsSUFpRUEsU0FBQUEsR0FDQWlCLEVBQUFsQixXQUFBQyxJQWxFQUQsQ0FBQUMsSUFDQWdCLEVBQUFULGlCQUFBLFFBQUEsSUFBQWpCLEVBQUFtQixJQUlBUyxFQTFCQSxxREEwQkFqRixLQUFBQyxJQUNBK0UsRUFBQTlDLFdBQUFqQyxHQUNBcEIsTUFBQVEsYUFBQVkiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmNvbnN0IGNoYXJ0ID0gKCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgbGV0IGxhYmVscyAgID0gW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCJdO1xyXG4gICAgbGV0IGRhdGFzZXRzID0gW107XHJcbiAgICBcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRDaGFydERhdGEgKCBjaGFydERhdGEgKXtcclxuXHJcbiAgICAgICAgbGV0IGN1cnJlbmNpZXMgPSBjaGFydERhdGEuZmlsdGVyKCAoIGNkLCBpbmRleCApID0+IGluZGV4IDw9IDkgKTtcclxuXHJcbiAgICAgICAgUHJvbWlzZS5hbGwoIGN1cnJlbmNpZXMubWFwKCBjZCA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBmZXRjaCggYGh0dHBzOi8vY29ycy1hbnl3aGVyZS5oZXJva3VhcHAuY29tL2h0dHBzOi8vbWluLWFwaS5jcnlwdG9jb21wYXJlLmNvbS9kYXRhL2hpc3RvZGF5P2ZzeW09JHtjZC5zeW1ib2x9JnRzeW09VVNEJmxpbWl0PTZgIClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbiggcmVzID0+IHJlcy5qc29uKCkgKVxyXG4gICAgICAgIH0gKSApXHJcbiAgICAgICAgLnRoZW4oIHJlcyA9PiB7XHJcblxyXG4gICAgICAgICAgICByZXMuZm9yRWFjaCggKCBkYXRhLCBpbmRleCApID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjbG9zaW5nUHJpY2VzID0gW107XHJcbiAgICAgICAgICAgICAgICBkYXRhLkRhdGEuZm9yRWFjaCggZCA9PiBjbG9zaW5nUHJpY2VzLnB1c2goIGQuY2xvc2UgKSApXHJcbiAgICAgICAgICAgICAgICBsZXQgbGluZUNvbG9yID0gZ2V0UmFuZG9tQ29sb3IoKVxyXG4gICAgICAgICAgICAgICAgZGF0YXNldHMucHVzaCgge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBjdXJyZW5jaWVzW2luZGV4XS5zeW1ib2wsXHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBsaW5lQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDQuNSxcclxuICAgICAgICAgICAgICAgICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogbGluZUNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiA1LFx0XHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRIb3ZlclJhZGl1czogOCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjbG9zaW5nUHJpY2VzLFxyXG4gICAgICAgICAgICAgICAgfSApXHJcbiAgICAgICAgICAgICB9IClcclxuXHJcbiAgICAgICAgICAgICBidWlsZENoYXJ0KCk7XHJcbiAgICAgICAgfSApXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGJ1aWxkQ2hhcnQoKSB7XHJcbiAgICAgICAgY29uc3QgY3R4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1cnJlbmN5LWNoYXJ0JykuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICBjb25zdCBjaGFydCA9IG5ldyBDaGFydChjdHgsIHtcclxuICAgICAgICAgICAgLy8gaGUgdHlwZSBvZiBjaGFydCB3ZSB3YW50IHRvIGNyZWF0ZVxyXG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICBcclxuICAgICAgICAgICAgLy8gVGhlIGRhdGEgZm9yIG91ciBkYXRhc2V0XHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVscyxcclxuICAgICAgICAgICAgICAgIGRhdGFzZXRzXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICBcclxuICAgICAgICAgICAgLy8gQ29uZmlndXJhdGlvbiBvcHRpb25zIGdvIGhlcmVcclxuICAgICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTp0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzpmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSApXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFJhbmRvbUNvbG9yKCkge1xyXG4gICAgICAgIHJldHVybiBgcmdiYSgke2dldFJhbmRvbSgpfSwgJHtnZXRSYW5kb20oKX0sICR7Z2V0UmFuZG9tKCl9LCAwLjgpYDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0UmFuZG9tKCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0Q2hhcnREYXRhXHJcbiAgICB9XHJcbn0gKSgpXHJcbiIsImNvbnN0IEN1cnJlbmN5VGFibGUgPSBmdW5jdGlvbiAoIGdsb2JhbCApIHtcclxuICAgIFxyXG4gICAgbGV0IGludmVzdEFtb3VudCAgICA9IDA7XHJcbiAgICBsZXQgYWxsQ3VycmVuY2llcyAgID0gW107XHJcbiAgICBsZXQgZmlhdCAgICAgICAgICAgID0gWyckJywgJ1VTRCddO1xyXG4gICAgY29uc3QgYzIwSW5kZXggICAgICA9IFsgMTMuNCwgMTIuMywgMTAuNSwgMTAuMiwgOS4yLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDcuNiwgNS40LCA0LjksIDQuMywgNCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjgsIDMuNCwgMi4xLCAxLjcsIDEuNSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjUsIDEuMiwgMS4yLCAwLjksIDAuOSBdO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHtjdXJyZW5jaWVzfSBBcnJheSBhcnJheSBvZiBjdXJyZW5jaWVzIGRhdGEgIFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBidWlsZFRhYmxlKCBjdXJyZW5jaWVzICkge1xyXG4gICAgICAgIC8vIEFkZCBmaWF0IHRvIHRoZWFkXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZpYXQnKS5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLnRleHRDb250ZW50ID0gYCAoJHtmaWF0WzFdfSlgKTtcclxuICAgICAgICBcclxuICAgICAgICBhbGxDdXJyZW5jaWVzID0gY3VycmVuY2llcztcclxuICAgICAgICBcclxuICAgICAgICBsZXQgdGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAndGJvZHknICk7XHJcbiAgICAgICAgbGV0IGN1cnJTeW1ib2xzID0gW107XHJcbiAgICAgICAgY3VycmVuY2llcy5mb3JFYWNoKCAoIGN1ciwgY29pbiApID0+IHtcclxuICAgICAgICAgICAgY3VyclN5bWJvbHMucHVzaChjdXIuc3ltYm9sKTtcclxuICAgICAgICAgICAgbGV0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3RyJyApO1xyXG4gICAgICAgICAgICB0ci5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7IGN1ci5yYW5rIH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD4keyBjdXIubmFtZSB9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+JHsgZm9ybWF0TnVtKCBjdXIubWFya2V0X2NhcF91c2QgKSB9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+JHsgZm9ybWF0TnVtKCBjdXIucHJpY2VfdXNkICkgfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7IGMyMEluZGV4W2NvaW5dIH0lPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+JHsgY2FsY3VsYXRlSW52ZXN0bWVudCggYzIwSW5kZXhbY29pbl0gKSB9PC90ZD5cclxuICAgICAgICAgICAgYDtcclxuICAgICAgICAgICAgdGJvZHkuYXBwZW5kQ2hpbGQoIHRyICkgICAgICBcclxuICAgICAgICB9KTtcclxuICAgICAgICBnbG9iYWwuY3VycmVuY3lUYWJsZS5hcHBlbmRDaGlsZCggdGJvZHkgKTtcclxuICAgICAgICBnbG9iYWwuZ2V0TmV3cyhjdXJyU3ltYm9scyk7XHJcbiAgICAgICAgZ2xvYmFsLmN1cnJlbmN5U3ltYm9sID0gY3VyclN5bWJvbHM7ICAgXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHt2YWx1ZX0gTnVtYmVyIGZyb20gY2VsbERhdGFcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IEZvcm1hdHRlZCB3aXRoIGNvbW1hcyBhbmQgZmlhdCBzeW1ib2wuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGZvcm1hdE51bSggdmFsdWUgKSB7XHJcbiAgICAgICAgbGV0IG5ld051bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGZsb2F0XHJcbiAgICAgICAgaWYgKG5ld051bSAlIDEgIT09IDAgJiYgbmV3TnVtID4gMSkge1xyXG4gICAgICAgICAgICAvLyBBZGQgZmlhdCBjdXJyZW5jeSBzeW1ib2wgJFxyXG4gICAgICAgICAgICAvLyBJZiBwcmljZSBpcyBvdmVyIDEsIGxpbWl0IGRlY2ltYWxzIHRvIHR3byBwbGFjZXNcclxuICAgICAgICAgICAgbmV3TnVtID0gYCR7ZmlhdFswXX0ke25ld051bS50b0ZpeGVkKDIpfWA7XHJcbiAgICAgICAgICAgIC8vIEFkZCBjb21tYSBhZnRlciBldmVyeSB0aHJlZSBudW1iZXJzXHJcbiAgICAgICAgICAgIHJldHVybiBuZXdOdW0gPSBuZXdOdW0ucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkXFxkKSsoPyFcXGQpKS9nLCBcIiQxLFwiKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5ld051bSA8IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ld051bSA9IGAke2ZpYXRbMF19JHtuZXdOdW19YDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBJZiBtYXJrZXQgY2FwLCBubyBkZWNpbWFsIHBsYWNlXHJcbiAgICAgICAgICAgIG5ld051bSA9IGAke2ZpYXRbMF19JHtwYXJzZUludChuZXdOdW0pfWA7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXdOdW0gPSBuZXdOdW0ucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkXFxkKSsoPyFcXGQpKS9nLCBcIiQxLFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9IFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge3ZhbHVlfSBOdW1iZXIgY3VycmVuY3kncyBpbmRleCBwZXJjZW50YWdlXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlSW52ZXN0bWVudCggdmFsdWUgKSB7XHJcbiAgICAgICAgLy8gPT09PT0gTmVlZCB0byBmaWd1cmUgb3V0IHRoZSBjYWxjdWxhdGlvbnMgaGVyZSA9PT09PSAvL1xyXG4gICAgICAgIGxldCBhbW91bnQgPSBpbnZlc3RBbW91bnQgKiB2YWx1ZSAvIDEwMDtcclxuICAgICAgICBpbnZlc3RBbW91bnQgPSBpbnZlc3RBbW91bnQgLSBhbW91bnQ7XHJcbiAgICAgICAgcmV0dXJuIGZvcm1hdE51bSggYW1vdW50ICk7IFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBzdWJtaXRGb3JtKCBlICkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZiggZ2xvYmFsLmlucHV0LnZhbHVlICE9PSAnJyApIHtcclxuICAgICAgICAgICAgaW52ZXN0QW1vdW50ID0gZ2xvYmFsLmlucHV0LnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgLy8gPT09PT0gUmVtb3ZlIHRhYmxlIGJvZHkgYW5kIHJlLXJlbmRlciA9PT09PSAvL1xyXG4gICAgICAgICAgICB3aGlsZSAoZ2xvYmFsLmN1cnJlbmN5VGFibGUuY2hpbGROb2Rlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBnbG9iYWwuY3VycmVuY3lUYWJsZS5yZW1vdmVDaGlsZChnbG9iYWwuY3VycmVuY3lUYWJsZS5sYXN0Q2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJ1aWxkVGFibGUoIGFsbEN1cnJlbmNpZXMgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYnVpbGRUYWJsZSxcclxuICAgICAgICBmb3JtYXROdW0sIFxyXG4gICAgICAgIGNhbGN1bGF0ZUludmVzdG1lbnQsXHJcbiAgICAgICAgc3VibWl0Rm9ybVxyXG4gICAgfVxyXG5cclxufSIsImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG5cclxuICAgIC8vID09PT09IEdMT0JBTFMgPT09PT0gLy9cclxuICAgIFxyXG5cclxuICAgIGNvbnN0IGMyMFVybCAgPSAnaHR0cHM6Ly9hcGkuY29pbm1hcmtldGNhcC5jb20vdjEvdGlja2VyLz9saW1pdD0yMCc7XHJcbiAgICBjb25zdCBuZXdzVXJsID0gJ2h0dHBzOi8vbWluLWFwaS5jcnlwdG9jb21wYXJlLmNvbS9kYXRhL25ld3MvP2NhdGVnb3JpZXM9JztcclxuICAgIGxldCBjdXJyZW5jeVN5bWJvbHMgPSBbXTtcclxuXHJcbiAgICAvLyBudW1iZXIgb2YgbmV3cyBhcnRpY2xlcyB0byBzaG93XHJcbiAgICBjb25zdCBuZXdzTGltaXQgPSA1O1xyXG4gICAgbGV0IGZpcnN0QXJ0aWNsZSA9IDA7XHJcbiAgICBsZXQgbGFzdEFydGljbGUgPSBuZXdzTGltaXQ7XHJcblxyXG4gICAgLy8gPT09PT0gUHV0IGFsbCBET00gdGFyZ2V0dGluZyBoZXJlID09PT09IC8vXHJcbiAgICBjb25zdCBjdXJyZW5jeVRhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggJy5jdXJyZW5jeS10YWJsZScgKTtcclxuICAgIGNvbnN0IGZvcm0gICAgICAgICAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnLmludmVzdC1mb3JtJyApO1xyXG4gICAgY29uc3QgaW5wdXQgICAgICAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICcuaW52ZXN0LWlucHV0JyApO1xyXG4gICAgY29uc3QgbmV3c1RhYmxlICAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICcubmV3cy10YWJsZScgKTtcclxuICAgIGNvbnN0IHJlZnJlc2hCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnLnJlZnJlc2gtaWNvbicgKTtcclxuXHJcblxyXG4gICAgLy8gPT09PT0gdGhpcyB2YXJpYWJsZSBob2xkcyBhbGwgdGhlIGZ1bmN0aW9ucyBmb3IgY3VycmVuY3kgdGFibGUgPT09PT0gLy9cclxuICAgIGNvbnN0IEN1cnJlbmN5ID0gQ3VycmVuY3lUYWJsZSggeyBmb3JtLCBpbnB1dCwgY3VycmVuY3lUYWJsZSwgZ2V0TmV3cywgY3VycmVuY3lTeW1ib2xzIH0gKTtcclxuXHJcbiAgICAvLyA9PT09PSBET00gTGlzdGVuZXJzID09PT09IC8vIFxyXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCAnc3VibWl0JywgKCBlICkgPT4gc3VibWl0Rm9ybSggZSApICk7XHJcbiAgICByZWZyZXNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICgpID0+IGdldE5ld3MoIGN1cnJlbmN5U3ltYm9scyApIClcclxuXHJcblxyXG5cclxuICAgIGdldERhdGEoYzIwVXJsKS50aGVuKCByZXMgPT4ge1xyXG4gICAgICAgIEN1cnJlbmN5LmJ1aWxkVGFibGUoIHJlcyApO1xyXG4gICAgICAgIGNoYXJ0LmdldENoYXJ0RGF0YSggcmVzICk7XHJcbiAgICB9IClcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7dXJsfSBTdHJpbmcgIHVybCBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHsgcHJvbWlzZSB9IFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXREYXRhKCB1cmwgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKCB1cmwgKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oIHJlcyA9PiByZXMuanNvbigpIClcclxuICAgIH07IFxyXG5cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gc2hvd05ld3MoYXJ0aWNsZXMpIHtcclxuICAgICAgICAvLyBJZiB1c2VyIHJlZnJlc2hlcyBuZXdzLCBwdWxsIG5ldyBiYXRjaFxyXG4gICAgICAgIC8vIFdoZW4gdXNlciBjeWNsZXMgNSB0aW1lcywgc3RhcnQgYWdhaW5cclxuICAgICAgICBpZiAobGFzdEFydGljbGUgPj0gbmV3c0xpbWl0ICogNSkge1xyXG4gICAgICAgICAgICBmaXJzdEFydGljbGUgPSAwO1xyXG4gICAgICAgICAgICBsYXN0QXJ0aWNsZSA9IG5ld3NMaW1pdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmaXJzdEFydGljbGUgKz0gbmV3c0xpbWl0O1xyXG4gICAgICAgICAgICBsYXN0QXJ0aWNsZSArPSBuZXdzTGltaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBhcnRpY2xlc1NhbXBsZSA9IGFydGljbGVzLnNsaWNlKGZpcnN0QXJ0aWNsZSwgbGFzdEFydGljbGUpOyAgXHJcbiAgICAgICAgbGV0IHRib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3Rib2R5JyApO1xyXG4gXHJcbiAgICAgICAgLy8gaWYgbmV3c3RhYmxlIGlzIGFscmVhZHkgcHJlc2VudCwgY2xlYXIgYmVmb3JlXHJcbiAgICAgICAgLy8gYXBwZW5kaW5nXHJcbiAgICAgICAgaWYgKG5ld3NUYWJsZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBuZXdzVGFibGUuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfVxyXG4gXHJcbiAgICAgICAgYXJ0aWNsZXNTYW1wbGUuZm9yRWFjaCgoaW5mbykgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAndHInICk7XHJcbiAgICAgICAgICAgIHRyLmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgPHRkPjxhIGNsYXNzPVwiZm9udC13ZWlnaHQtYm9sZFwiIGhyZWY9XCIke2luZm8udXJsfVwiPiR7aW5mby50aXRsZX08L2E+IDxwPiR7aW5mby5zb3VyY2V9PC9wPlxyXG4gICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICB0Ym9keS5hcHBlbmRDaGlsZCggdHIgKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIG5ld3NUYWJsZS5hcHBlbmRDaGlsZCggdGJvZHkgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogXHJcbiAgICAgKiBjb25zdHJ1Y3QgbmV3cyBiYXNlZCBvbiB0b3AgMjAgY3J5cHRvXHJcbiAgICAgKiBAcGFyYW0ge2N1cnJTeW1ib2x9IEFycmF5IGN1cnJlbmN5c3ltYm9sc1xyXG4gICAgICogZWc6IFsnQlRDJywgJ0VUSCddXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0TmV3cyhjdXJyU3ltYm9scykge1xyXG4gICAgICAgIGxldCBjdXJyU3RyaW5nID0gY3VyclN5bWJvbHMuam9pbihcIixcIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZmV0Y2hVcmwgPSBuZXdzVXJsLmNvbmNhdChjdXJyU3RyaW5nKTtcclxuXHJcbiAgICAgICAgZ2V0RGF0YShmZXRjaFVybCkudGhlbihyZXMgPT4gc2hvd05ld3MocmVzKSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHN1Ym1pdEZvcm0oIGUgKSB7XHJcbiAgICAgICAgQ3VycmVuY3kuc3VibWl0Rm9ybSggZSApO1xyXG4gICAgfVxyXG59IClcclxuIl19
