const chart=function(){let t=["January","February","March","April","May","June","July"],e=[];function n(){return Math.floor(256*Math.random()).toString()}return{getChartData:function(r){return t=[],e=[],fetch(`https://cors-anywhere.herokuapp.com/https://min-api.cryptocompare.com/data/histoday?fsym=${r}&tsym=USD&limit=6`).then(t=>t.json()).then(c=>{let a=[];c.Data.forEach(e=>{a.push(e.close),t.push(e.time)});let o=`rgba(${n()}, ${n()}, ${n()}, 0.8)`;e.push({label:r,backgroundColor:"transparent",borderColor:o,borderWidth:4.5,pointBackgroundColor:o,pointRadius:5,pointHoverRadius:8,data:a}),console.log(e),function(){const n=document.getElementById("currency-chart").getContext("2d");new Chart(n,{type:"line",data:{labels:t,datasets:e},options:{responsive:!0,maintainAspectRatio:!1}})}()})}}}(),CurrencyTable=function(t){let e=0,n=[],r=["$","USD"];const c=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9];function a(e){document.querySelectorAll(".fiat").forEach(t=>t.textContent=` (${r[1]})`),n=e;let a=document.createElement("tbody"),d=[];e.forEach((e,n)=>{d.push(e.symbol);let r=document.createElement("tr");r.innerHTML=`\n                    <td>${e.rank}</td>\n                    <td>${e.name}</td>\n                    <td>${o(e.market_cap_usd)}</td>\n                    <td>${o(e.price_usd)}</td>\n                    <td>${c[n]}%</td>\n                    <td>${l(c[n])}</td>\n            `,a.appendChild(r),r.addEventListener("click",()=>{document.getElementById("currency-chart").innerHTML="",t.chart.getChartData(e.symbol)})}),t.currencyTable.appendChild(a),t.getNews(d),t.currencySymbol=d}function o(t){let e=parseFloat(t);return e%1!=0&&e>1?(e=`${r[0]}${e.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):e<1?`${r[0]}${e}`:(e=`${r[0]}${parseInt(e)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}function l(t){let n=e*t/100;return e-=n,o(n)}return{buildTable:a,formatNum:o,calculateInvestment:l,submitForm:function(r){if(r.preventDefault(),""!==t.input.value){for(e=t.input.value;t.currencyTable.childNodes.length>1;)t.currencyTable.removeChild(t.currencyTable.lastChild);a(n)}}}};document.addEventListener("DOMContentLoaded",()=>{const t="https://min-api.cryptocompare.com/data/news/?categories=";let e=[];const n=5;let r=0,c=n;const a=document.querySelector(".currency-table"),o=document.querySelector(".invest-form"),l=document.querySelector(".invest-input"),d=document.querySelector(".news-table"),u=document.querySelector(".refresh-icon"),i=CurrencyTable({form:o,input:l,currencyTable:a,getNews:m,currencySymbols:e,chart:chart});function s(t){return fetch(t).then(t=>t.json())}function m(e){let a=e.join(",");fetchUrl=t.concat(a),s(fetchUrl).then(t=>(function(t){c>=5*n?(r=0,c=n):(r+=n,c+=n);let e=t.slice(r,c),a=document.createElement("tbody");null!==d&&(d.innerHTML=""),e.forEach(t=>{let e=document.createElement("tr");e.innerHTML=`\n            <td><a class="font-weight-bold" href="${t.url}">${t.title}</a> <p>${t.source}</p>\n            </td>\n            `,a.appendChild(e)}),d.appendChild(a)})(t))}o.addEventListener("submit",t=>(function(t){i.submitForm(t)})(t)),u.addEventListener("click",()=>m(e)),s("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(t=>{i.buildTable(t),chart.getChartData("BTC")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
