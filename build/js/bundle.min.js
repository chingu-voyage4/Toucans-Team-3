const chart=function(){let t=["January","February","March","April","May","June","July"],e=[];function n(){return Math.floor(256*Math.random()).toString()}return{getChartData:function(r){let a=r.filter((t,e)=>e<=9);Promise.all(a.map(t=>fetch(`https://cors-anywhere.herokuapp.com/https://min-api.cryptocompare.com/data/histoday?fsym=${t.symbol}&tsym=USD&limit=6`).then(t=>t.json()))).then(r=>{r.forEach((t,r)=>{let o=[];t.Data.forEach(t=>o.push(t.close)),e.push({label:a[r].symbol,backgroundColor:"transparent",borderColor:`rgba(${n()}, ${n()}, ${n()}, 0.8)`,data:o})}),function(){const n=document.getElementById("currency-chart").getContext("2d");new Chart(n,{type:"line",data:{labels:t,datasets:e},options:{}})}()})}}}();document.addEventListener("DOMContentLoaded",()=>{let t=0,e=[],n=["$","USD"];const r=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9],a="https://min-api.cryptocompare.com/data/news/?categories=",o=20,c=document.querySelector(".currency-table"),d=document.querySelector(".invest-form"),l=document.querySelector(".invest-input"),i=document.querySelector(".news-table");function u(t){return fetch(t).then(t=>t.json())}function s(t){let e=t.join(",");fetchUrl=a.concat(e),console.log(fetchUrl),u(fetchUrl).then(t=>(function(t){let e=t.slice(0,o);document.createElement("tbody"),e.forEach(t=>{let e=document.createElement("tr");e.innerHTML=`\n            <td><img src="${t.imageurl}" title=${t.title}" alt="news"/></td>\n            <td><p></p><a href="${t.url}">${t.title}</a></p>\n            <p>${t.body}</p></td>\n            `,i.appendChild(e)})})(t))}function h(a){document.querySelectorAll(".fiat").forEach(t=>t.textContent=` (${n[1]})`),e=a;let o=document.createElement("tbody"),d=[];a.forEach((e,n)=>{d.push(e.symbol);let a=document.createElement("tr");a.innerHTML=`\n                    <td>${e.rank}</td>\n                    <td>${e.name}</td>\n                    <td>${m(e.market_cap_usd)}</td>\n                    <td>${m(e.price_usd)}</td>\n                    <td>${r[n]}%</td>\n                    <td>${function(e){let n=t*e/100;return t-=n,m(n)}(r[n])}</td>\n            `,o.appendChild(a)}),s(d),c.appendChild(o)}function m(t){let e=parseFloat(t);return e%1!=0&&e>1?(e=`${n[0]}${e.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):e<1?`${n[0]}${e}`:(e=`${n[0]}${parseInt(e)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}d.addEventListener("submit",n=>(function(n){if(n.preventDefault(),""!==l.value){for(t=l.value;c.childNodes.length>1;)c.removeChild(c.lastChild);h(e)}})(n)),u("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(t=>{h(t),chart.getChartData(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,