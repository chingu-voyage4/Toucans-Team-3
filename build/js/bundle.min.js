const chart=function(){let e=["January","February","March","April","May","June","July"],t=[];function n(){return Math.floor(256*Math.random()).toString()}return{getChartData:function(r,a){return e=[],t=[],fetch(`https://cors-anywhere.herokuapp.com/https://min-api.cryptocompare.com/data/histoday?fsym=${r}&tsym=USD&limit=6`).then(e=>e.json()).then(r=>{let c=[];r.Data.forEach(t=>{c.push(t.close),e.push(function(e){const t=new Date(1e3*e),n=t.getDate(),r=t.getMonth();return`${["January","February","March","April","May","June","July","August","September","October","November","December"][r]} ${n}`}(t.time))}),n(),n(),n(),t.push({label:a,backgroundColor:"transparent",borderColor:"rgba( 0, 0, 0, 0.7)",borderWidth:3,pointBackgroundColor:"#66ff66",pointRadius:5,pointHoverRadius:8,data:c}),function(){const n=document.getElementById("currency-chart").getContext("2d");new Chart(n,{type:"line",data:{labels:e,datasets:t},options:{responsive:!0,maintainAspectRatio:!1,scales:{yAxes:[{scaleLabel:{display:!0,labelString:"Price in USD",fontSize:20}}],xAxes:[{scaleLabel:{display:!0,labelString:"Day",fontSize:20}}]}}})}()})}}}(),CurrencyTable=function(e){let t=0,n=[],r=["$","USD"];const a=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9],c=document.getElementById("currency-chart");function o(t){document.querySelectorAll(".fiat").forEach(e=>e.textContent=` (${r[1]})`),n=t;let o=document.createElement("tbody"),s=[];t.forEach((t,n)=>{s.push(t.symbol);let r=document.createElement("tr");r.innerHTML=`\n                    <td>${t.rank}</td>\n                    <td><span class="currency-name">${t.name}</span> <span class="currency-symbol"> ${t.symbol} </span></td>\n                    <td>${l(t.market_cap_usd)}</td>\n                    <td>${l(t.price_usd)}</td>\n                    <td>${a[n]}%</td>\n                    <td>${i(a[n])}</td>\n            `,r.style.cursor="pointer",o.appendChild(r),r.addEventListener("click",n=>{!function(e){let t=document.querySelectorAll("tr.active");for(let e=0;e<t.length;e++)t[e].classList.remove("active");"span"===e.target.nodeName.toLowerCase()?e.target.parentNode.parentNode.classList.add("active"):e.target.parentNode.classList.add("active")}(n),c.innerHTML="",e.chart.getChartData(t.symbol,t.name),c.scrollIntoView({behavior:"smooth"})})}),e.currencyTable.appendChild(o),e.getNews(s),e.currencySymbol=s}function l(e){let t=parseFloat(e);return t%1!=0&&t>1?(t=`${r[0]}${t.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):t<1?`${r[0]}${t}`:(t=`${r[0]}${parseInt(t)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}function i(e){let n=t*e/100;return t-=n,l(n)}return{buildTable:o,formatNum:l,calculateInvestment:i,submitForm:function(r){if(r.preventDefault(),""!==e.input.value){for(t=e.input.value;e.currencyTable.childNodes.length>1;)e.currencyTable.removeChild(e.currencyTable.lastChild);o(n)}}}};document.addEventListener("DOMContentLoaded",()=>{const e="https://min-api.cryptocompare.com/data/news/?categories=";let t=[];const n=5;let r=0,a=n;const c=document.querySelector(".currency-table"),o=document.querySelector(".invest-form"),l=document.querySelector(".invest-input"),i=document.querySelector(".news-table"),s=document.querySelector(".refresh-icon"),d=CurrencyTable({form:o,input:l,currencyTable:c,getNews:m,currencySymbols:t,chart:chart});function u(e){return fetch(e).then(e=>e.json())}function m(t){let c=t.join(",");s.children[0].classList.add("spin-animation"),setTimeout(function(){s.children[0].classList.remove("spin-animation")},500),fetchUrl=e.concat(c),u(fetchUrl).then(e=>(function(e){a>=5*n?(r=0,a=n):(r+=n,a+=n);let t=e.slice(r,a),c=document.createElement("tbody");null!==i&&(i.innerHTML=""),t.forEach(e=>{let t=document.createElement("tr");t.innerHTML=`\n            <td><a class="font-weight-bold" href="${e.url}">${e.title}</a> <p>${e.source}</p>\n            </td>\n            `,c.appendChild(t)}),i.appendChild(c)})(e))}o.addEventListener("submit",e=>(function(e){d.submitForm(e)})(e)),s.addEventListener("click",()=>m(t)),u("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(e=>{d.buildTable(e),chart.getChartData("BTC","Bitcoin")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
