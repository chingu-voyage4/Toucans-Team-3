const chart=function(){let e=["January","February","March","April","May","June","July"],t=[];function n(){return Math.floor(256*Math.random()).toString()}return{getChartData:function(r,a){return e=[],t=[],fetch(`https://cors-anywhere.herokuapp.com/https://min-api.cryptocompare.com/data/histoday?fsym=${r}&tsym=USD&limit=6`).then(e=>e.json()).then(r=>{let c=[];r.Data.forEach(t=>{c.push(t.close),e.push(function(e){const t=new Date(1e3*e),n=t.getDate(),r=t.getMonth();return`${["January","February","March","April","May","June","July","August","September","October","November","December"][r]} ${n}`}(t.time))}),n(),n(),n(),t.push({label:a,backgroundColor:"transparent",borderColor:"rgba( 0, 0, 0, 0.7)",borderWidth:3,pointBackgroundColor:"#66ff66",pointRadius:5,pointHoverRadius:8,data:c}),function(){const n=document.getElementById("currency-chart").getContext("2d");new Chart(n,{type:"line",data:{labels:e,datasets:t},options:{responsive:!0,maintainAspectRatio:!1,scales:{yAxes:[{scaleLabel:{display:!0,labelString:"Price in USD",fontSize:20}}],xAxes:[{scaleLabel:{display:!0,labelString:"Day",fontSize:20}}]}}})}()})}}}(),CurrencyTable=function(e){let t=0,n=[],r=["$","USD"];const a=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9],c=document.querySelector(".curr-chart");function o(o){document.querySelectorAll(".fiat").forEach(e=>e.textContent=` (${r[1]})`),n=o;let l=document.createElement("tbody"),d=[];o.forEach((n,r)=>{d.push(n.symbol);let o=document.createElement("tr");o.innerHTML=`\n                    <td>${n.rank}</td>\n                    <td><span class="currency-name">${n.name}</span> <span class="currency-symbol"> ${n.symbol} </span></td>\n                    <td>${s(n.market_cap_usd)}</td>\n                    <td>${s(n.price_usd)}</td>\n                    <td>${a[r]}%</td>\n                    <td>${i(a[r])}<br><span class='coin-output'>  (${t*a[r]/100/n.price_usd})</span><br><a class="btn btn-danger" href= ${function(e){switch(e){case"BTC":return"https://www.binance.com/trade.html?symbol=BTC_USDT";case"ETH":return"https://www.binance.com/trade.html?symbol=ETH_USDT";default:return`'https://www.binance.com/trade.html?symbol=${e}_BTC'`}}(n.symbol)}>Buy on Binance</a></td>\n            `,o.style.cursor="pointer",l.appendChild(o),o.addEventListener("click",t=>{const r=document.getElementById("currency-chart");o.classList.contains("active")||r.scrollIntoView({behavior:"smooth"}),function(e){let t=document.querySelectorAll("tr.active");for(let e=0;e<t.length;e++)t[e].classList.remove("active");"span"===e.target.nodeName.toLowerCase()?e.target.parentNode.parentNode.classList.add("active"):e.target.parentNode.classList.add("active")}(t),c.innerHTML="",c.innerHTML='<canvas id="currency-chart"></canvas>',e.chart.getChartData(n.symbol,n.name)})}),e.currencyTable.appendChild(l),e.getNews(d),e.currencySymbol=d}function s(e){let t=parseFloat(e);return t%1!=0&&t>1?(t=`${r[0]}${t.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):t<1?`${r[0]}${t}`:(t=`${r[0]}${parseInt(t)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}function i(e){return s(t*e/100)}return{buildTable:o,formatNum:s,calculateInvestment:i,submitForm:function(r){if(r.preventDefault(),""!==e.input.value){for(t=e.input.value;e.currencyTable.childNodes.length>1;)e.currencyTable.removeChild(e.currencyTable.lastChild);o(n)}}}};document.addEventListener("DOMContentLoaded",()=>{const e="https://min-api.cryptocompare.com/data/news/?categories=";let t=[];const n=5;let r=0,a=n;const c=document.querySelector(".currency-table"),o=document.querySelector(".invest-form"),s=document.querySelector(".invest-input"),i=document.querySelector(".news-table"),l=document.querySelector(".refresh-icon"),d=document.querySelector("#nav-main"),u=d.offsetTop,m=CurrencyTable({form:o,input:s,currencyTable:c,getNews:h,currencySymbols:t,chart:chart});function p(e){return fetch(e).then(e=>e.json())}function h(t){let c=t.join(",");l.children[0].classList.add("spin-animation"),setTimeout(function(){l.children[0].classList.remove("spin-animation")},500),fetchUrl=e.concat(c),p(fetchUrl).then(e=>(function(e){a>=5*n?(r=0,a=n):(r+=n,a+=n);let t=e.slice(r,a),c=document.createElement("tbody");null!==i&&(i.innerHTML=""),t.forEach(e=>{let t=document.createElement("tr");t.innerHTML=`\n            <td><a class="font-weight-bold" href="${e.url}">${e.title}</a> <p>${e.source}</p>\n            </td>\n            `,c.appendChild(t)}),i.appendChild(c)})(e))}o.addEventListener("submit",e=>(function(e){m.submitForm(e)})(e)),l.addEventListener("click",()=>h(t)),window.addEventListener("scroll",function(){window.scrollY>=u?(document.body.style.paddingTop=d.offsetHeight+"px",document.body.classList.add("fixed-nav")):(document.body.style.paddingTop=0,document.body.classList.remove("fixed-nav"))}),p("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(e=>{m.buildTable(e),chart.getChartData("BTC","Bitcoin")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYXJ0LmpzIiwiY3VycmVuY3lUYWJsZS5qcyIsIm1haW4uanMiXSwibmFtZXMiOlsiY2hhcnQiLCJsYWJlbHMiLCJkYXRhc2V0cyIsImdldFJhbmRvbSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInRvU3RyaW5nIiwiZ2V0Q2hhcnREYXRhIiwiY3VyU3ltYm9sIiwiY3VyTmFtZSIsImZldGNoIiwidGhlbiIsInJlcyIsImpzb24iLCJjbG9zaW5nUHJpY2VzIiwiRGF0YSIsImZvckVhY2giLCJkIiwicHVzaCIsImNsb3NlIiwiZGF0ZVRpbWUiLCJkYXRlU3RyaW5nIiwiRGF0ZSIsImRheSIsImdldERhdGUiLCJtb250aEluZGV4IiwiZ2V0TW9udGgiLCJwYXJzZURhdGUiLCJ0aW1lIiwibGFiZWwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwicG9pbnRCYWNrZ3JvdW5kQ29sb3IiLCJwb2ludFJhZGl1cyIsInBvaW50SG92ZXJSYWRpdXMiLCJkYXRhIiwiY3R4IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJDaGFydCIsInR5cGUiLCJvcHRpb25zIiwicmVzcG9uc2l2ZSIsIm1haW50YWluQXNwZWN0UmF0aW8iLCJzY2FsZXMiLCJ5QXhlcyIsInNjYWxlTGFiZWwiLCJkaXNwbGF5IiwibGFiZWxTdHJpbmciLCJmb250U2l6ZSIsInhBeGVzIiwiYnVpbGRDaGFydCIsIkN1cnJlbmN5VGFibGUiLCJnbG9iYWwiLCJpbnZlc3RBbW91bnQiLCJhbGxDdXJyZW5jaWVzIiwiZmlhdCIsImMyMEluZGV4IiwiY3VycmVuY3lDb250YWluZXIiLCJxdWVyeVNlbGVjdG9yIiwiYnVpbGRUYWJsZSIsImN1cnJlbmNpZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaXRlbSIsInRleHRDb250ZW50IiwidGJvZHkiLCJjcmVhdGVFbGVtZW50IiwiY3VyclN5bWJvbHMiLCJjdXIiLCJjb2luIiwic3ltYm9sIiwidHIiLCJpbm5lckhUTUwiLCJyYW5rIiwibmFtZSIsImZvcm1hdE51bSIsIm1hcmtldF9jYXBfdXNkIiwicHJpY2VfdXNkIiwiY2FsY3VsYXRlSW52ZXN0bWVudCIsImN1cnJlbmN5IiwiYWRkQnV5QnV0dCIsInN0eWxlIiwiY3Vyc29yIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImN1cnJlbmN5Q2hhcnQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJldmVudCIsImFsbEFjdGl2ZSIsImkiLCJsZW5ndGgiLCJyZW1vdmUiLCJ0YXJnZXQiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwicGFyZW50Tm9kZSIsImFkZCIsInNob3dhY3RpdmVSb3ciLCJjdXJyZW5jeVRhYmxlIiwiZ2V0TmV3cyIsImN1cnJlbmN5U3ltYm9sIiwidmFsdWUiLCJuZXdOdW0iLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsInJlcGxhY2UiLCJwYXJzZUludCIsInN1Ym1pdEZvcm0iLCJwcmV2ZW50RGVmYXVsdCIsImlucHV0IiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwibGFzdENoaWxkIiwibmV3c1VybCIsImN1cnJlbmN5U3ltYm9scyIsIm5ld3NMaW1pdCIsImZpcnN0QXJ0aWNsZSIsImxhc3RBcnRpY2xlIiwiZm9ybSIsIm5ld3NUYWJsZSIsInJlZnJlc2hCdXR0b24iLCJuYXYiLCJ0b3BPZk5hdiIsIm9mZnNldFRvcCIsIkN1cnJlbmN5IiwiZ2V0RGF0YSIsInVybCIsImN1cnJTdHJpbmciLCJqb2luIiwiY2hpbGRyZW4iLCJzZXRUaW1lb3V0IiwiZmV0Y2hVcmwiLCJjb25jYXQiLCJhcnRpY2xlcyIsImFydGljbGVzU2FtcGxlIiwic2xpY2UiLCJpbmZvIiwidGl0bGUiLCJzb3VyY2UiLCJzaG93TmV3cyIsIndpbmRvdyIsInNjcm9sbFkiLCJib2R5IiwicGFkZGluZ1RvcCIsIm9mZnNldEhlaWdodCJdLCJtYXBwaW5ncyI6IkFBQ0Es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aUJBQUEsU0FVQSxXQUNBNEQsT0FBQUMsU0FBQW5CLEdBQ0ExRixTQUFBOEcsS0FBQWpFLE1BQUFrRSxXQUFBdEIsRUFBQXVCLGFBQUEsS0FDQWhILFNBQUE4RyxLQUFBM0QsVUFBQWEsSUFBQSxlQUVBaEUsU0FBQThHLEtBQUFqRSxNQUFBa0UsV0FBQSxFQUNBL0csU0FBQThHLEtBQUEzRCxVQUFBUSxPQUFBLGdCQVpBa0MsRUE5QkEscURBOEJBeEgsS0FBQUMsSUFDQXNILEVBQUFwRSxXQUFBbEQsR0FDQWIsTUFBQVEsYUFBQSxNQUFBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5jb25zdCBjaGFydCA9ICggZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIGxldCBsYWJlbHMgICA9IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiXTtcclxuICAgIGxldCBkYXRhc2V0cyA9IFtdO1xyXG4gICAgXHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q2hhcnREYXRhICggY3VyU3ltYm9sLCBjdXJOYW1lICl7XHJcblxyXG4gICAgICAgIGxhYmVscyAgID0gW107XHJcbiAgICAgICAgZGF0YXNldHMgPSBbXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZldGNoKCBgaHR0cHM6Ly9jb3JzLWFueXdoZXJlLmhlcm9rdWFwcC5jb20vaHR0cHM6Ly9taW4tYXBpLmNyeXB0b2NvbXBhcmUuY29tL2RhdGEvaGlzdG9kYXk/ZnN5bT0ke2N1clN5bWJvbH0mdHN5bT1VU0QmbGltaXQ9NmAgKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oIHJlcyA9PiByZXMuanNvbigpIClcclxuICAgICAgICAgICAgICAgIC50aGVuKCByZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vID09PT09IENoZWNrIGZvciBFbXB0eSBEYXRhID09PT09IC8vXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2xvc2luZ1ByaWNlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5EYXRhLmZvckVhY2goIGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zaW5nUHJpY2VzLnB1c2goIGQuY2xvc2UgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxzLnB1c2goIHBhcnNlRGF0ZSggZC50aW1lICkgKVxyXG4gICAgICAgICAgICAgICAgICAgICB9IClcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGluZUNvbG9yID0gZ2V0UmFuZG9tQ29sb3IoKVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGN1ck5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKCAwLCAwLCAwLCAwLjcpJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50QmFja2dyb3VuZENvbG9yOiAnIzY2ZmY2NicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiA1LFx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50SG92ZXJSYWRpdXM6IDgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGNsb3NpbmdQcmljZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgfSApXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBidWlsZENoYXJ0KCk7XHJcbiAgICAgICAgICAgICAgICB9IClcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VEYXRlKCBkYXRlVGltZSApIHtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IG5ldyBEYXRlKCBkYXRlVGltZSAqIDEwMDAgKTtcclxuICAgICAgICBjb25zdCBtb250aE5hbWVzID0gW1xyXG4gICAgICAgICAgICBcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsXHJcbiAgICAgICAgICAgIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLFxyXG4gICAgICAgICAgICBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIixcclxuICAgICAgICAgICAgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGRheSA9IGRhdGVTdHJpbmcuZ2V0RGF0ZSgpO1xyXG4gICAgICAgIGNvbnN0IG1vbnRoSW5kZXggPSBkYXRlU3RyaW5nLmdldE1vbnRoKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gYCR7bW9udGhOYW1lc1ttb250aEluZGV4XX0gJHtkYXl9YDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gYnVpbGRDaGFydCgpIHtcclxuICAgICAgICBjb25zdCBjdHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVuY3ktY2hhcnQnKS5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gbmV3IENoYXJ0KGN0eCwge1xyXG4gICAgICAgICAgICAvLyBoZSB0eXBlIG9mIGNoYXJ0IHdlIHdhbnQgdG8gY3JlYXRlXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgIFxyXG4gICAgICAgICAgICAvLyBUaGUgZGF0YSBmb3Igb3VyIGRhdGFzZXRcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgbGFiZWxzLFxyXG4gICAgICAgICAgICAgICAgZGF0YXNldHNcclxuICAgICAgICAgICAgfSxcclxuICAgIFxyXG4gICAgICAgICAgICAvLyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZ28gaGVyZVxyXG4gICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOnRydWUsXHJcbiAgICAgICAgICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOmZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2NhbGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeUF4ZXM6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzY2FsZUxhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsU3RyaW5nOiAnUHJpY2UgaW4gVVNEJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDIwXHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgeEF4ZXM6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlTGFiZWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsU3RyaW5nOiAnRGF5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMjBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gKVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRSYW5kb21Db2xvcigpIHtcclxuICAgICAgICByZXR1cm4gYHJnYmEoJHtnZXRSYW5kb20oKX0sICR7Z2V0UmFuZG9tKCl9LCAke2dldFJhbmRvbSgpfSwgMC44KWA7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFJhbmRvbSgpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KS50b1N0cmluZygpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldENoYXJ0RGF0YVxyXG4gICAgfVxyXG59ICkoKVxyXG4iLCJjb25zdCBDdXJyZW5jeVRhYmxlID0gZnVuY3Rpb24gKCBnbG9iYWwgKSB7XHJcbiAgICBcclxuICAgIGxldCBpbnZlc3RBbW91bnQgICAgPSAwO1xyXG4gICAgbGV0IGFsbEN1cnJlbmNpZXMgICA9IFtdO1xyXG4gICAgbGV0IGZpYXQgICAgICAgICAgICA9IFsnJCcsICdVU0QnXTtcclxuICAgIGNvbnN0IGMyMEluZGV4ICAgICAgPSBbIDEzLjQsIDEyLjMsIDEwLjUsIDEwLjIsIDkuMiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA3LjYsIDUuNCwgNC45LCA0LjMsIDQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMy44LCAzLjQsIDIuMSwgMS43LCAxLjUsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMS41LCAxLjIsIDEuMiwgMC45LCAwLjkgXTtcclxuICAgIFxyXG4gICAgY29uc3QgY3VycmVuY3lDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnLmN1cnItY2hhcnQnICk7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge2N1cnJlbmNpZXN9IEFycmF5IGFycmF5IG9mIGN1cnJlbmNpZXMgZGF0YSAgXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGJ1aWxkVGFibGUoIGN1cnJlbmNpZXMgKSB7XHJcbiAgICAgICAgLy8gQWRkIGZpYXQgdG8gdGhlYWRcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmlhdCcpLmZvckVhY2goKGl0ZW0pID0+IGl0ZW0udGV4dENvbnRlbnQgPSBgICgke2ZpYXRbMV19KWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGFsbEN1cnJlbmNpZXMgPSBjdXJyZW5jaWVzO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCB0Ym9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICd0Ym9keScgKTtcclxuICAgICAgICBsZXQgY3VyclN5bWJvbHMgPSBbXTtcclxuICAgICAgICBjdXJyZW5jaWVzLmZvckVhY2goICggY3VyLCBjb2luICkgPT4ge1xyXG4gICAgICAgICAgICBjdXJyU3ltYm9scy5wdXNoKGN1ci5zeW1ib2wpO1xyXG4gICAgICAgICAgICBsZXQgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAndHInICk7XHJcbiAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0ci5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7IGN1ci5yYW5rIH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD48c3BhbiBjbGFzcz1cImN1cnJlbmN5LW5hbWVcIj4keyBjdXIubmFtZX08L3NwYW4+IDxzcGFuIGNsYXNzPVwiY3VycmVuY3ktc3ltYm9sXCI+ICR7Y3VyLnN5bWJvbH0gPC9zcGFuPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7IGZvcm1hdE51bSggY3VyLm1hcmtldF9jYXBfdXNkICkgfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7IGZvcm1hdE51bSggY3VyLnByaWNlX3VzZCApIH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD4keyBjMjBJbmRleFtjb2luXSB9JTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7IGNhbGN1bGF0ZUludmVzdG1lbnQoIGMyMEluZGV4W2NvaW5dICkgfTxicj48c3BhbiBjbGFzcz0nY29pbi1vdXRwdXQnPiAgKCR7IChpbnZlc3RBbW91bnQgKiBjMjBJbmRleFtjb2luXSAvIDEwMCkgLyBjdXIucHJpY2VfdXNkfSk8L3NwYW4+PGJyPjxhIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIiBocmVmPSAkeyBhZGRCdXlCdXR0KCBjdXIuc3ltYm9sICkgfT5CdXkgb24gQmluYW5jZTwvYT48L3RkPlxyXG4gICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICB0ci5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XHJcbiAgICAgICAgICAgIHRib2R5LmFwcGVuZENoaWxkKCB0ciApICBcclxuXHJcbiAgICAgICAgICAgIHRyLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICggZSApID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW5jeUNoYXJ0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdjdXJyZW5jeS1jaGFydCcgKTsgIFxyXG4gICAgICAgICAgICAgICAgaWYgKCF0ci5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVuY3lDaGFydC5zY3JvbGxJbnRvVmlldyggeyBiZWhhdmlvcjogJ3Ntb290aCcgfSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2hvd2FjdGl2ZVJvdyggZSApO1xyXG4gICAgICAgICAgICAgICAgY3VycmVuY3lDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW5jeUNvbnRhaW5lci5pbm5lckhUTUwgPSBgPGNhbnZhcyBpZD1cImN1cnJlbmN5LWNoYXJ0XCI+PC9jYW52YXM+YFxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsLmNoYXJ0LmdldENoYXJ0RGF0YSggY3VyLnN5bWJvbCwgY3VyLm5hbWUgKTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICB9ICkgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGdsb2JhbC5jdXJyZW5jeVRhYmxlLmFwcGVuZENoaWxkKCB0Ym9keSApO1xyXG4gICAgICAgIGdsb2JhbC5nZXROZXdzKGN1cnJTeW1ib2xzKTtcclxuICAgICAgICBnbG9iYWwuY3VycmVuY3lTeW1ib2wgPSBjdXJyU3ltYm9sczsgICBcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gc2hvd2FjdGl2ZVJvdyggZXZlbnQgKSB7XHJcbiAgICAgICAgbGV0IGFsbEFjdGl2ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICd0ci5hY3RpdmUnICk7XHJcbiAgICAgICAgZm9yKCBsZXQgaSA9IDAgOyBpIDwgYWxsQWN0aXZlLmxlbmd0aCA7IGkgKysgKXtcclxuICAgICAgICAgICAgYWxsQWN0aXZlW2ldLmNsYXNzTGlzdC5yZW1vdmUoICdhY3RpdmUnICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBldmVudC50YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NwYW4nXHJcbiAgICAgICAgICAgID8gIGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCggJ2FjdGl2ZScgKVxyXG4gICAgICAgICAgICA6ICBldmVudC50YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCAnYWN0aXZlJyApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHt2YWx1ZX0gTnVtYmVyIGZyb20gY2VsbERhdGFcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IEZvcm1hdHRlZCB3aXRoIGNvbW1hcyBhbmQgZmlhdCBzeW1ib2wuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGZvcm1hdE51bSggdmFsdWUgKSB7XHJcbiAgICAgICAgbGV0IG5ld051bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGZsb2F0XHJcbiAgICAgICAgaWYgKG5ld051bSAlIDEgIT09IDAgJiYgbmV3TnVtID4gMSkge1xyXG4gICAgICAgICAgICAvLyBBZGQgZmlhdCBjdXJyZW5jeSBzeW1ib2wgJFxyXG4gICAgICAgICAgICAvLyBJZiBwcmljZSBpcyBvdmVyIDEsIGxpbWl0IGRlY2ltYWxzIHRvIHR3byBwbGFjZXNcclxuICAgICAgICAgICAgbmV3TnVtID0gYCR7ZmlhdFswXX0ke25ld051bS50b0ZpeGVkKDIpfWA7XHJcbiAgICAgICAgICAgIC8vIEFkZCBjb21tYSBhZnRlciBldmVyeSB0aHJlZSBudW1iZXJzXHJcbiAgICAgICAgICAgIHJldHVybiBuZXdOdW0gPSBuZXdOdW0ucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkXFxkKSsoPyFcXGQpKS9nLCBcIiQxLFwiKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5ld051bSA8IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ld051bSA9IGAke2ZpYXRbMF19JHtuZXdOdW19YDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBJZiBtYXJrZXQgY2FwLCBubyBkZWNpbWFsIHBsYWNlXHJcbiAgICAgICAgICAgIG5ld051bSA9IGAke2ZpYXRbMF19JHtwYXJzZUludChuZXdOdW0pfWA7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXdOdW0gPSBuZXdOdW0ucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkXFxkKSsoPyFcXGQpKS9nLCBcIiQxLFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9IFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge3ZhbHVlfSBOdW1iZXIgY3VycmVuY3kncyBpbmRleCBwZXJjZW50YWdlXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlSW52ZXN0bWVudCggdmFsdWUgKSB7XHJcbiAgICAgICAgLy8gPT09PT0gTmVlZCB0byBmaWd1cmUgb3V0IHRoZSBjYWxjdWxhdGlvbnMgaGVyZSA9PT09PSAvL1xyXG4gICAgICAgIGxldCBhbW91bnQgPSBpbnZlc3RBbW91bnQgKiB2YWx1ZSAvIDEwMDtcclxuICAgICAgICByZXR1cm4gZm9ybWF0TnVtKCBhbW91bnQgKTsgXHJcbiAgICB9XHJcblxyXG4gICAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHsgY3VycmVuY3kgfSBDdXJyZW5jeSdzIHN5bWJvbCBuYW1lIGkuZS4gQlRDXHJcbiAgICAgKiBAcmV0dXJucyB7VVJMIHRvIGJ1eSBjb2luIG9uIEJpbmFuY2V9IFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBhZGRCdXlCdXR0KCBjdXJyZW5jeSApIHtcclxuICAgICAgICAvLyBJZiBjb2luIGNhbiBiZSBwdXJjaGFzZWQgd2l0aCBVU0QgYW5kIGlzIHBvcHVsYXIsIGNoYW5nZSBVUkwuXHJcbiAgICAgICAgc3dpdGNoIChjdXJyZW5jeSkge1xyXG4gICAgICAgICAgICBjYXNlICdCVEMnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdodHRwczovL3d3dy5iaW5hbmNlLmNvbS90cmFkZS5odG1sP3N5bWJvbD1CVENfVVNEVCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnRVRIJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnaHR0cHM6Ly93d3cuYmluYW5jZS5jb20vdHJhZGUuaHRtbD9zeW1ib2w9RVRIX1VTRFQnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCdodHRwczovL3d3dy5iaW5hbmNlLmNvbS90cmFkZS5odG1sP3N5bWJvbD0ke2N1cnJlbmN5fV9CVEMnYFxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBzdWJtaXRGb3JtKCBlICkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZiggZ2xvYmFsLmlucHV0LnZhbHVlICE9PSAnJyApIHtcclxuICAgICAgICAgICAgaW52ZXN0QW1vdW50ID0gZ2xvYmFsLmlucHV0LnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgLy8gPT09PT0gUmVtb3ZlIHRhYmxlIGJvZHkgYW5kIHJlLXJlbmRlciA9PT09PSAvL1xyXG4gICAgICAgICAgICB3aGlsZSAoZ2xvYmFsLmN1cnJlbmN5VGFibGUuY2hpbGROb2Rlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBnbG9iYWwuY3VycmVuY3lUYWJsZS5yZW1vdmVDaGlsZChnbG9iYWwuY3VycmVuY3lUYWJsZS5sYXN0Q2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJ1aWxkVGFibGUoIGFsbEN1cnJlbmNpZXMgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYnVpbGRUYWJsZSxcclxuICAgICAgICBmb3JtYXROdW0sIFxyXG4gICAgICAgIGNhbGN1bGF0ZUludmVzdG1lbnQsXHJcbiAgICAgICAgc3VibWl0Rm9ybVxyXG4gICAgfVxyXG5cclxufSIsImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG5cclxuICAgIC8vID09PT09IEdMT0JBTFMgPT09PT0gLy9cclxuICAgIFxyXG5cclxuICAgIGNvbnN0IGMyMFVybCAgPSAnaHR0cHM6Ly9hcGkuY29pbm1hcmtldGNhcC5jb20vdjEvdGlja2VyLz9saW1pdD0yMCc7XHJcbiAgICBjb25zdCBuZXdzVXJsID0gJ2h0dHBzOi8vbWluLWFwaS5jcnlwdG9jb21wYXJlLmNvbS9kYXRhL25ld3MvP2NhdGVnb3JpZXM9JztcclxuICAgIGxldCBjdXJyZW5jeVN5bWJvbHMgPSBbXTtcclxuXHJcbiAgICAvLyBudW1iZXIgb2YgbmV3cyBhcnRpY2xlcyB0byBzaG93XHJcbiAgICBjb25zdCBuZXdzTGltaXQgPSA1O1xyXG4gICAgbGV0IGZpcnN0QXJ0aWNsZSA9IDA7XHJcbiAgICBsZXQgbGFzdEFydGljbGUgPSBuZXdzTGltaXQ7XHJcblxyXG4gICAgLy8gPT09PT0gUHV0IGFsbCBET00gdGFyZ2V0dGluZyBoZXJlID09PT09IC8vXHJcbiAgICBjb25zdCBjdXJyZW5jeVRhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggJy5jdXJyZW5jeS10YWJsZScgKTtcclxuICAgIGNvbnN0IGZvcm0gICAgICAgICAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnLmludmVzdC1mb3JtJyApO1xyXG4gICAgY29uc3QgaW5wdXQgICAgICAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICcuaW52ZXN0LWlucHV0JyApO1xyXG4gICAgY29uc3QgbmV3c1RhYmxlICAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICcubmV3cy10YWJsZScgKTtcclxuICAgIGNvbnN0IHJlZnJlc2hCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnLnJlZnJlc2gtaWNvbicgKTtcclxuICAgIGNvbnN0IG5hdiAgICAgICAgICAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmF2LW1haW4nKTtcclxuICAgIGNvbnN0IHRvcE9mTmF2ICAgICAgPSBuYXYub2Zmc2V0VG9wO1xyXG4gICAgXHJcblxyXG5cclxuICAgIC8vID09PT09IHRoaXMgdmFyaWFibGUgaG9sZHMgYWxsIHRoZSBmdW5jdGlvbnMgZm9yIGN1cnJlbmN5IHRhYmxlID09PT09IC8vXHJcbiAgICBjb25zdCBDdXJyZW5jeSA9IEN1cnJlbmN5VGFibGUoIHsgZm9ybSwgaW5wdXQsIGN1cnJlbmN5VGFibGUsIGdldE5ld3MsIGN1cnJlbmN5U3ltYm9scywgY2hhcnQgfSApO1xyXG5cclxuICAgIC8vID09PT09IERPTSBMaXN0ZW5lcnMgPT09PT0gLy8gXHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoICdzdWJtaXQnLCAoIGUgKSA9PiBzdWJtaXRGb3JtKCBlICkgKTtcclxuICAgIHJlZnJlc2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgKCkgPT4gZ2V0TmV3cyggY3VycmVuY3lTeW1ib2xzICkgKVxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZpeE5hdik7XHJcblxyXG5cclxuXHJcbiAgICBnZXREYXRhKGMyMFVybCkudGhlbiggcmVzID0+IHtcclxuICAgICAgICBDdXJyZW5jeS5idWlsZFRhYmxlKCByZXMgKTtcclxuICAgICAgICBjaGFydC5nZXRDaGFydERhdGEoICdCVEMnLCAnQml0Y29pbicgKTtcclxuICAgIH0gKVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBmaXhOYXYoKSB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5zY3JvbGxZID49IHRvcE9mTmF2KSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1RvcCA9IG5hdi5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2ZpeGVkLW5hdicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1RvcCA9IDA7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnZml4ZWQtbmF2Jyk7XHJcbiAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7dXJsfSBTdHJpbmcgIHVybCBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHsgcHJvbWlzZSB9IFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXREYXRhKCB1cmwgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKCB1cmwgKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oIHJlcyA9PiByZXMuanNvbigpIClcclxuICAgIH07IFxyXG5cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gc2hvd05ld3MoYXJ0aWNsZXMpIHtcclxuICAgICAgICAvLyBJZiB1c2VyIHJlZnJlc2hlcyBuZXdzLCBwdWxsIG5ldyBiYXRjaFxyXG4gICAgICAgIC8vIFdoZW4gdXNlciBjeWNsZXMgNSB0aW1lcywgc3RhcnQgYWdhaW5cclxuICAgICAgICBpZiAobGFzdEFydGljbGUgPj0gbmV3c0xpbWl0ICogNSkge1xyXG4gICAgICAgICAgICBmaXJzdEFydGljbGUgPSAwO1xyXG4gICAgICAgICAgICBsYXN0QXJ0aWNsZSA9IG5ld3NMaW1pdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmaXJzdEFydGljbGUgKz0gbmV3c0xpbWl0O1xyXG4gICAgICAgICAgICBsYXN0QXJ0aWNsZSArPSBuZXdzTGltaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBhcnRpY2xlc1NhbXBsZSA9IGFydGljbGVzLnNsaWNlKGZpcnN0QXJ0aWNsZSwgbGFzdEFydGljbGUpOyAgXHJcbiAgICAgICAgbGV0IHRib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3Rib2R5JyApO1xyXG4gXHJcbiAgICAgICAgLy8gaWYgbmV3c3RhYmxlIGlzIGFscmVhZHkgcHJlc2VudCwgY2xlYXIgYmVmb3JlXHJcbiAgICAgICAgLy8gYXBwZW5kaW5nXHJcbiAgICAgICAgaWYgKG5ld3NUYWJsZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBuZXdzVGFibGUuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfVxyXG4gXHJcbiAgICAgICAgYXJ0aWNsZXNTYW1wbGUuZm9yRWFjaCgoaW5mbykgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAndHInICk7XHJcbiAgICAgICAgICAgIHRyLmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgPHRkPjxhIGNsYXNzPVwiZm9udC13ZWlnaHQtYm9sZFwiIGhyZWY9XCIke2luZm8udXJsfVwiPiR7aW5mby50aXRsZX08L2E+IDxwPiR7aW5mby5zb3VyY2V9PC9wPlxyXG4gICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICB0Ym9keS5hcHBlbmRDaGlsZCggdHIgKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIG5ld3NUYWJsZS5hcHBlbmRDaGlsZCggdGJvZHkgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogXHJcbiAgICAgKiBjb25zdHJ1Y3QgbmV3cyBiYXNlZCBvbiB0b3AgMjAgY3J5cHRvXHJcbiAgICAgKiBAcGFyYW0ge2N1cnJTeW1ib2x9IEFycmF5IGN1cnJlbmN5c3ltYm9sc1xyXG4gICAgICogZWc6IFsnQlRDJywgJ0VUSCddXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0TmV3cyhjdXJyU3ltYm9scykge1xyXG4gICAgICAgIGxldCBjdXJyU3RyaW5nID0gY3VyclN5bWJvbHMuam9pbihcIixcIik7XHJcbiAgICAgICAgcmVmcmVzaEJ1dHRvbi5jaGlsZHJlblswXS5jbGFzc0xpc3QuYWRkKCdzcGluLWFuaW1hdGlvbicpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgXHQgICAgcmVmcmVzaEJ1dHRvbi5jaGlsZHJlblswXS5jbGFzc0xpc3QucmVtb3ZlKCdzcGluLWFuaW1hdGlvbicpO1xyXG4gICAgICAgICAgICB9LCA1MDApO1xyXG5cclxuICAgICAgICBmZXRjaFVybCA9IG5ld3NVcmwuY29uY2F0KGN1cnJTdHJpbmcpO1xyXG5cclxuICAgICAgICBnZXREYXRhKGZldGNoVXJsKS50aGVuKHJlcyA9PiBzaG93TmV3cyhyZXMpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gc3VibWl0Rm9ybSggZSApIHtcclxuICAgICAgICBDdXJyZW5jeS5zdWJtaXRGb3JtKCBlICk7XHJcbiAgICB9XHJcbn0gKVxyXG4iXX0=
