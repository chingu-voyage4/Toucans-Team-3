const chart=function(){let t=["January","February","March","April","May","June","July"],e=[];function n(){return Math.floor(256*Math.random()).toString()}return{getChartData:function(r){let a=r.filter((t,e)=>e<=9);Promise.all(a.map(t=>fetch(`https://cors-anywhere.herokuapp.com/https://min-api.cryptocompare.com/data/histoday?fsym=${t.symbol}&tsym=USD&limit=6`).then(t=>t.json()))).then(r=>{r.forEach((t,r)=>{let o=[];t.Data.forEach(t=>o.push(t.close)),e.push({label:a[r].symbol,backgroundColor:"transparent",borderColor:`rgba(${n()}, ${n()}, ${n()}, 0.8)`,data:o})}),function(){const n=document.getElementById("currency-chart").getContext("2d");new Chart(n,{type:"line",data:{labels:t,datasets:e},options:{}})}()})}}}();document.addEventListener("DOMContentLoaded",()=>{let t=0,e=[],n=["$","USD"];const r=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9],a="https://min-api.cryptocompare.com/data/news/?categories=",o=5;let c;const l=document.querySelector(".currency-table"),d=document.querySelector(".invest-form"),i=document.querySelector(".invest-input"),u=document.querySelector(".news-table");function s(t){return fetch(t).then(t=>t.json())}function h(t){let e=t.join(",");fetchUrl=a.concat(e),s(fetchUrl).then(t=>(function(t){let e=t.slice(0,o),n=document.createElement("tbody");n.setAttribute("id","newstable");let r=document.querySelector("#newstable");null!==r&&(r.innerHTML=""),e.forEach(t=>{let e=document.createElement("tr");e.innerHTML=`\n            <td><a class="font-weight-bold" href="${t.url}">${t.title}</a> <p>${t.source}</p>\n            </td>\n            `,n.appendChild(e)}),u.appendChild(n)})(t))}function m(a){document.querySelectorAll(".fiat").forEach(t=>t.textContent=` (${n[1]})`),e=a;let o=document.createElement("tbody"),d=[];a.forEach((e,n)=>{d.push(e.symbol);let a=document.createElement("tr");a.innerHTML=`\n                    <td>${e.rank}</td>\n                    <td>${e.name}</td>\n                    <td>${p(e.market_cap_usd)}</td>\n                    <td>${p(e.price_usd)}</td>\n                    <td>${r[n]}%</td>\n                    <td>${function(e){let n=t*e/100;return t-=n,p(n)}(r[n])}</td>\n            `,o.appendChild(a)}),l.appendChild(o),h(d),c&&clearInterval(c),c=setInterval(()=>h(d),12e4)}function p(t){let e=parseFloat(t);return e%1!=0&&e>1?(e=`${n[0]}${e.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):e<1?`${n[0]}${e}`:(e=`${n[0]}${parseInt(e)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}d.addEventListener("submit",n=>(function(n){if(n.preventDefault(),""!==i.value){for(t=i.value;l.childNodes.length>1;)l.removeChild(l.lastChild);m(e)}})(n)),s("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(t=>{m(t),chart.getChartData(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
