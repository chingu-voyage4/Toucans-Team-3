const chart=function(){let t=["January","February","March","April","May","June","July"],e=[];function n(){return Math.floor(256*Math.random()).toString()}return{getChartData:function(r){let o=r.filter((t,e)=>e<=9);Promise.all(o.map(t=>fetch(`https://cors-anywhere.herokuapp.com/https://min-api.cryptocompare.com/data/histoday?fsym=${t.symbol}&tsym=USD&limit=6`).then(t=>t.json()))).then(r=>{r.forEach((t,r)=>{let c=[];t.Data.forEach(t=>c.push(t.close));let a=`rgba(${n()}, ${n()}, ${n()}, 0.8)`;e.push({label:o[r].symbol,backgroundColor:"transparent",borderColor:a,borderWidth:4.5,pointBackgroundColor:a,pointRadius:5,pointHoverRadius:8,data:c})}),function(){const n=document.getElementById("currency-chart").getContext("2d");new Chart(n,{type:"line",data:{labels:t,datasets:e},options:{responsive:!0,maintainAspectRatio:!1}})}()})}}}(),CurrencyTable=function(t){let e=0,n=[],r=["$","USD"];const o=[13.4,12.3,10.5,10.2,9.2,7.6,5.4,4.9,4.3,4,3.8,3.4,2.1,1.7,1.5,1.5,1.2,1.2,.9,.9];function c(e){document.querySelectorAll(".fiat").forEach(t=>t.textContent=` (${r[1]})`),n=e;let c=document.createElement("tbody"),d=[];e.forEach((t,e)=>{d.push(t.symbol);let n=document.createElement("tr");n.innerHTML=`\n                    <td>${t.rank}</td>\n                    <td>${t.name}</td>\n                    <td>${a(t.market_cap_usd)}</td>\n                    <td>${a(t.price_usd)}</td>\n                    <td>${o[e]}%</td>\n                    <td>${l(o[e])}</td>\n            `,c.appendChild(n)}),t.currencyTable.appendChild(c),t.getNews(d),t.currencySymbol=d}function a(t){let e=parseFloat(t);return e%1!=0&&e>1?(e=`${r[0]}${e.toFixed(2)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,"):e<1?`${r[0]}${e}`:(e=`${r[0]}${parseInt(e)}`).replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1,")}function l(t){let n=e*t/100;return e-=n,a(n)}return{buildTable:c,formatNum:a,calculateInvestment:l,submitForm:function(r){if(r.preventDefault(),""!==t.input.value){for(e=t.input.value;t.currencyTable.childNodes.length>1;)t.currencyTable.removeChild(t.currencyTable.lastChild);c(n)}}}};document.addEventListener("DOMContentLoaded",()=>{const t="https://min-api.cryptocompare.com/data/news/?categories=";let e=[];const n=5,r=document.querySelector(".currency-table"),o=document.querySelector(".invest-form"),c=document.querySelector(".invest-input"),a=document.querySelector(".news-table"),l=document.querySelector(".refresh-icon"),d=CurrencyTable({form:o,input:c,currencyTable:r,getNews:i,currencySymbols:e});function u(t){return fetch(t).then(t=>t.json())}function i(e){let r=e.join(",");fetchUrl=t.concat(r),u(fetchUrl).then(t=>(function(t){let e=t.slice(0,n),r=document.createElement("tbody");null!==a&&(a.innerHTML=""),e.forEach(t=>{let e=document.createElement("tr");e.innerHTML=`\n            <td><a class="font-weight-bold" href="${t.url}">${t.title}</a> <p>${t.source}</p>\n            </td>\n            `,r.appendChild(e)}),a.appendChild(r)})(t))}o.addEventListener("submit",t=>(function(t){d.submitForm(t)})(t)),l.addEventListener("click",()=>i(e)),u("https://api.coinmarketcap.com/v1/ticker/?limit=20").then(t=>{d.buildTable(t),chart.getChartData(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
